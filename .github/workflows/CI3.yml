name: "CI 3"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"  # Daily at 6:00 UTC

jobs:
  update-go:
    name: Update to Latest Go Version with AI Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Get Latest Go Version
        id: go-version
        run: |
          set -euo pipefail
          echo "Fetching latest Go release..."
          JSON=$(curl -fLsS https://go.dev/dl/?mode=json)
          
          LATEST_VERSION=$(echo "$JSON" | \
            jq -r 'map(select(.stable==true)) | first | .version' | \
            sed 's/^go//')
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::Failed to fetch latest Go version, using fallback detection"
            # Fallback: check current Go version and increment if possible
            CURRENT_GO=$(grep '^go ' go.mod | cut -d' ' -f2 || echo "1.25")
            LATEST_VERSION=$(echo "$CURRENT_GO" | awk -F. '{print $1"."($2+1)}')
          fi
          
          echo "version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "Using Go version: $LATEST_VERSION"

      - name: Set up Go ${{ steps.go-version.outputs.version }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ steps.go-version.outputs.version }}

      - name: Verify go.mod version
        run: |
          set -euo pipefail
          sed -i "s/^go .*/go ${{ steps.go-version.outputs.version }}/" go.mod
          go mod tidy

      - name: Upgrade dependencies safely
        run: |
          set -euo pipefail
          # Create backup of current state
          cp go.mod go.mod.backup
          cp go.sum go.sum.backup 2>/dev/null || true
          
          # Get all direct dependencies
          go list -m -f '{{if not (or .Indirect .Main)}}{{.Path}}{{end}}' all > direct_deps.txt
          
          # Update direct dependencies with safe version validation
          while read -r dep; do
            if [ -n "$dep" ]; then
              echo "Processing dependency: $dep"
              
              # Get current version
              current_version=$(go list -m -f '{{.Version}}' "$dep" 2>/dev/null || echo "")
              
              if [ -z "$current_version" ]; then
                echo "Skipping $dep (could not get current version)"
                continue
              fi
              
              # Get latest version safely
              latest_version=$(go list -m -f '{{.Version}}' "$dep@latest" 2>/dev/null || echo "")
              
              if [ -z "$latest_version" ]; then
                echo "Skipping $dep (could not get latest version)"
                continue
              fi
              
              # Extract major version for comparison
              current_major=$(echo "$current_version" | cut -d'.' -f1 | sed 's/v//')
              latest_major=$(echo "$latest_version" | cut -d'.' -f1 | sed 's/v//')
              
              # Only update if major version matches
              if [ "$current_major" = "$latest_major" ] && [ "$current_version" != "$latest_version" ]; then
                echo "Updating $dep from $current_version to $latest_version"
                go get "$dep@latest"
              else
                echo "Keeping $dep at $current_version (major version change or same version)"
              fi
            fi
          done < direct_deps.txt
          
          go mod tidy

      - name: Apply automatic fixes & formatting
        run: |
          set -euo pipefail
          go fmt ./...
          go fix ./...

      - name: Tidy modules & vet
        run: |
          set -euo pipefail
          go mod tidy
          go vet ./...
          go mod verify

      - name: Run tests
        id: test
        run: |
          set -euo pipefail
          # Run tests with timeout
          if go test ./... -timeout=5m -v 2>&1 | tee test_output.txt; then
            echo "tests_failed=false" >> "$GITHUB_OUTPUT"
          else
            echo "tests_failed=true" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: AI Code Analysis with DeepSeek
        id: ai-analysis
        continue-on-error: true  # Continue even if AI analysis fails
        run: |
          set -euo pipefail
          mkdir -p ai-analysis
          
          # Prepare code context for AI analysis
          {
            echo "Current Go version: ${{ steps.go-version.outputs.version }}"
            echo "=== GO.MOD ==="
            cat go.mod
            echo "=== GO.SUM ==="
            cat go.sum 2>/dev/null || echo "No go.sum file"
            echo "=== DEPENDENCIES ==="
            go list -m all
            echo "=== TEST RESULTS ==="
            if [ -f test_output.txt ]; then
              cat test_output.txt
            else
              echo "No test output available"
            fi
          } > ai-analysis/context.txt
          
          # Check if API key is available
          if [ -z "${{ secrets.OPENROUTER_API_KEY }}" ]; then
            echo "OPENROUTER_API_KEY secret not available, skipping AI analysis"
            echo "AI analysis skipped due to missing API key" > ai-analysis/recommendations.md
            exit 0
          fi
          
          # Prepare AI analysis request (truncate to avoid token limits)
          head -c 10000 ai-analysis/context.txt > ai-analysis/context_truncated.txt
          
          cat > ai-analysis/request.json << EOF
          {
            "model": "deepseek/deepseek-r1:free",
            "messages": [
              {
                "role": "system",
                "content": "You are a senior Go developer and security expert. Analyze this Go codebase for:\n1. Potential bugs or issues\n2. Security vulnerabilities\n3. Code quality improvements\n4. Dependency issues in go.mod/go.sum\n5. Best practices violations\n6. Performance optimizations\n7. Compatibility with Go ${{ steps.go-version.outputs.version }}\n\nProvide specific, actionable recommendations with code examples when appropriate."
              },
              {
                "role": "user",
                "content": "$(cat ai-analysis/context_truncated.txt | jq -R -s -c . | cut -c 2- | rev | cut -c 2- | rev)"
              }
            ],
            "temperature": 0.1,
            "max_tokens": 4000
          }
          EOF
          
          # Call DeepSeek API with timeout and error handling
          echo "Calling DeepSeek API for code analysis..."
          if ! curl -X POST "https://openrouter.ai/api/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -d "@ai-analysis/request.json" \
            -o ai-analysis/response.json \
            --max-time 300 \
            --fail-with-body; then
            echo "AI analysis API call failed or timed out, continuing without AI insights"
            echo "AI analysis failed due to API error or timeout" > ai-analysis/recommendations.md
            exit 0
          fi
          
          # Extract and format AI response
          if [ -f "ai-analysis/response.json" ]; then
            if jq -e '.choices[0].message.content' ai-analysis/response.json > /dev/null 2>&1; then
              jq -r '.choices[0].message.content' ai-analysis/response.json > ai-analysis/recommendations.md
              echo "AI analysis completed successfully"
            else
              echo "AI analysis response format unexpected"
              echo "AI analysis failed due to unexpected response format" > ai-analysis/recommendations.md
            fi
          else
            echo "AI analysis response file not found"
            echo "AI analysis failed due to missing response" > ai-analysis/recommendations.md
          fi

      - name: Install and use git-cliff
        run: |
          set -euo pipefail
          curl -fsSL https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz -o git-cliff.tar.gz
          tar xzf git-cliff.tar.gz
          sudo install -m 0755 git-cliff-2.10.0/git-cliff /usr/local/bin/git-cliff
          git-cliff --unreleased --output changelog.md 2>/dev/null || true

      - name: Upload AI analysis results
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: ai-analysis-results
          path: ai-analysis/

      - name: Clean up temporary files
        run: |
          set -euo pipefail
          # Remove temporary files to avoid committing them
          rm -f direct_deps.txt git-cliff.tar.gz go.mod.backup test_output.txt
          rm -rf git-cliff-2.10.0/ ai-analysis/
          rm -f go.sum.backup 2>/dev/null || true

      - name: Prepare PR body
        run: |
          set -euo pipefail
          GO_VER="${{ steps.go-version.outputs.version }}"
          TF="${{ steps.test.outputs.tests_failed }}"
          
          # Create PR body
          {
            echo "## üîß Updates"
            echo "- Go version ‚Üí ${GO_VER}"
            echo "- Dependencies upgraded (safe upgrades only)"
            echo "- Automatic formatting and fixes applied"
            echo ""
            echo "## üìú Changelog Diff"
            
            if [ -f changelog.md ]; then
              cat changelog.md
            else
              echo "_No changelog generated._"
            fi
            
            echo -e "\n## ‚úÖ Test Status"
            if [ "${TF}" = "true" ]; then
              echo "‚ùå Tests failed ‚Äî see test output below"
              echo '```'
              if [ -f test_output.txt ]; then
                cat test_output.txt
              else
                echo "No test output available"
              fi
              echo '```'
            else
              echo "‚úÖ All tests passed"
            fi
            
            echo -e "\n## üîç Quality Checks"
            echo "- ‚úÖ go fmt applied"
            echo "- ‚úÖ go fix applied" 
            echo "- ‚úÖ go mod tidy executed"
            echo "- ‚úÖ go vet passed"
            echo "- ‚úÖ go mod verified"
            
            echo -e "\n## ü§ñ AI Code Analysis"
            if [ -f "ai-analysis/recommendations.md" ]; then
              cat ai-analysis/recommendations.md
            else
              echo "AI analysis was not completed (see artifacts for details)"
            fi
          } > pr_body.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "chore: update Go ${{ steps.go-version.outputs.version }} and dependencies with AI analysis"
          branch: "update/go-${{ steps.go-version.outputs.version }}"
          title: "Update Go ${{ steps.go-version.outputs.version }} and dependencies with AI Analysis"
          body-path: pr_body.md
          delete-branch: true 
