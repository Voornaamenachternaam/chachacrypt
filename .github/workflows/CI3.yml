name: "CI 3"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"  # Daily at 6:00 UTC

jobs:
  update-go:
    name: Update to Latest Go Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Get Latest Go Version
        id: go-version
        run: |
          set -euo pipefail
          echo "Fetching latest Go release..."
          JSON=$(curl -fLsS https://go.dev/dl/?mode=json)
          
          LATEST_VERSION=$(echo "$JSON" | \
            jq -r 'map(select(.stable==true)) | first | .version' | \
            sed 's/^go//')
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "::error::Failed to determine latest Go version"
            exit 1
          fi
          
          echo "version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "Using Go version: $LATEST_VERSION"

      - name: Set up Go ${{ steps.go-version.outputs.version }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ steps.go-version.outputs.version }}

      - name: Verify go.mod version
        run: |
          set -euo pipefail
          sed -i "s/^go .*/go ${{ steps.go-version.outputs.version }}/" go.mod
          go mod tidy

      - name: Upgrade dependencies
        run: |
          set -euo pipefail
          # Get all direct dependencies
          go list -m -f '{{if not (or .Indirect .Main)}}{{.Path}}{{end}}' all > direct_deps.txt
          
          # Update direct dependencies within same major version
          while read -r dep; do
            if [ -n "$dep" ]; then
              current_version=$(go list -m -f '{{.Version}}' "$dep")
              latest_version=$(go list -m -f '{{.Version}}' "$dep@latest")
              
              # Only update if major version matches
              if [ "${current_version%%.*}" = "${latest_version%%.*}" ]; then
                go get "$dep@latest"
              fi
            fi
          done < direct_deps.txt
          
          go mod tidy

      - name: Apply automatic fixes & formatting
        run: |
          set -euo pipefail
          go fmt ./...
          go fix ./...

      - name: Tidy modules & vet
        run: |
          set -euo pipefail
          go mod tidy
          go vet ./...
          # Additional static analysis
          go mod verify

      - name: Run comprehensive tests
        id: test
        run: |
          set -euo pipefail
          # Create test output directory
          mkdir -p test-results
          
          # Run tests with coverage, timeout, and JUnit output
          gotestsum --junitfile test-results/junit.xml --format standard-verbose -- \
            -timeout=5m \
            -coverprofile=test-results/coverage.out \
            -covermode=atomic \
            ./...
          
          # Generate coverage report
          go tool cover -html=test-results/coverage.out -o test-results/coverage.html
          
          # Check if tests passed
          if [ $? -eq 0 ]; then
            echo "tests_failed=false" >> "$GITHUB_OUTPUT"
          else
            echo "tests_failed=true" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Install and use git-cliff
        run: |
          set -euo pipefail
          # Download and install git-cliff
          curl -fsSL https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz -o git-cliff.tar.gz
          tar xzf git-cliff.tar.gz
          
          # Install the binary (it's in the extracted directory)
          sudo install -m 0755 git-cliff-2.10.0/git-cliff /usr/local/bin/git-cliff
          
          # Generate changelog (suppress config warning)
          git-cliff --unreleased --output changelog.md 2>/dev/null || true

      - name: Upload test results
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            !test-results/*.tmp

      - name: Clean up temporary files
        run: |
          set -euo pipefail
          # Remove temporary files to avoid committing them
          rm -f direct_deps.txt git-cliff.tar.gz
          rm -rf git-cliff-2.10.0/

      - name: Prepare PR body
        run: |
          set -euo pipefail
          GO_VER="${{ steps.go-version.outputs.version }}"
          TF="${{ steps.test.outputs.tests_failed }}"
          
          # Create PR body
          {
            echo "## 🔧 Updates"
            echo "- Go version → ${GO_VER}"
            echo "- Dependencies upgraded (safe upgrades only)"
            echo "- Automatic formatting and fixes applied"
            echo ""
            echo "## 📜 Changelog Diff"
            
            if [ -f changelog.md ]; then
              cat changelog.md
            else
              echo "_No changelog generated._"
            fi
            
            echo -e "\n## ✅ Test Status"
            if [ "${TF}" = "true" ]; then
              echo "❌ Tests failed — see test results artifact"
            else
              echo "✅ All tests passed"
              echo "- Code formatting validated"
              echo "- Static analysis passed"
              echo "- All tests completed successfully"
            fi
            
            echo -e "\n## 🔍 Quality Checks"
            echo "- ✅ go fmt applied"
            echo "- ✅ go fix applied" 
            echo "- ✅ go mod tidy executed"
            echo "- ✅ go vet passed"
            echo "- ✅ go mod verified"
          } > pr_body.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "chore: update Go ${{ steps.go-version.outputs.version }} and dependencies with comprehensive testing"
          branch: "update/go-${{ steps.go-version.outputs.version }}"
          title: "Update Go ${{ steps.go-version.outputs.version }} and dependencies with comprehensive testing"
          body-path: pr_body.md
          delete-branch: true
