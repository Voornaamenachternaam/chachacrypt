name: CI 3

on:
  schedule:
    - cron: '0 6 * * *'        # Daily at 06:00 UTC
  workflow_dispatch:
  pull_request_target:
    types: [opened, edited, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  detect-go-versions:
    name: Detect Go versions (latest stable + recent)
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - name: Fetch stable Go releases list
        id: fetch
        run: |
          set -euo pipefail
          echo "Fetching go.dev release list..."
          JSON=$(curl -sS 'https://go.dev/dl/?mode=json' || true)
          if [ -z "${JSON:-}" ]; then
            echo "::warning::Failed to fetch go.dev list; leaving JSON empty"
            echo "json_empty=true" >> $GITHUB_OUTPUT
          else
            echo "json_present=true" >> $GITHUB_OUTPUT
            echo "$JSON" > /tmp/go_dl.json
          fi

      - name: Build matrix JSON output
        id: set
        run: |
          set -euo pipefail
          # Default fallback matrix (safe pinned list in case fetch fails)
          FALLBACK='["1.25","1.24","1.23"]'

          if [ -f /tmp/go_dl.json ]; then
            # Extract stable versions, convert "go1.25.0" -> "1.25", preserve order (newest first),
            # deduplicate by major.minor and keep up to 3 entries (latest + up to 2 recent).
            VERSIONS=$(jq -r 'map(select(.stable==true)) | .[] | .version' /tmp/go_dl.json \
              | awk -F'go' '{print $2}' \
              | awk -F. '{print $1"."$2}' \
              | awk '!seen[$0]++' )

            # Build array with latest + up to two previous
            MATRIX_ARRAY=()
            COUNT=0
            for v in $VERSIONS; do
              MATRIX_ARRAY+=("\"${v}\"")
              COUNT=$((COUNT+1))
              if [ "$COUNT" -ge 3 ]; then
                break
              fi
            done

            if [ ${#MATRIX_ARRAY[@]} -eq 0 ]; then
              echo "::warning::Could not parse versions from go.dev; using fallback"
              MATRIX_JSON="$FALLBACK"
            else
              MATRIX_JSON="[${MATRIX_ARRAY[*]}]"
            fi
          else
            echo "::warning::Go releases JSON not available; using fallback matrix"
            MATRIX_JSON="$FALLBACK"
          fi

          echo "Detected matrix: $MATRIX_JSON"
          # set as step output for job output
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  update-go:
    name: Update Go, deps & auto-PR
    needs: detect-go-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ${{ fromJson(needs.detect-go-versions.outputs.matrix) }}
    env:
      GO_CACHE_DATE: ${{ github.run_id }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Confirm go version
        run: |
          set -euo pipefail
          echo "Runner Go version:"
          go version

      - name: Cache Go modules & build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go.sum') }}-${{ env.GO_CACHE_DATE }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Ensure go.mod 'go' directive matches runtime (if present)
        run: |
          set -euo pipefail
          if [ -f go.mod ]; then
            sed -i "s/^go .*/go ${{ matrix.go-version }}/" go.mod
            echo "Updated go.mod 'go' line to ${{ matrix.go-version }}"
          else
            echo "No go.mod present; skipping go.mod bump"
          fi

      - name: Safe dependency upgrades (no major bumps; skip upgrades requiring newer Go)
        run: |
          set -euo pipefail
          echo "Finding upgrade candidates (same-major only, will skip updates that require newer Go)"

          # Gather candidate modules (Path CurrentVersion UpdateVersion)
          mapfile -t CANDS < <(go list -m -u -json all 2>/dev/null \
            | jq -r 'select(.Update) | "\(.Path) \(.Version // "") \(.Update.Version // "")"' || true)

          if [ ${#CANDS[@]} -eq 0 ]; then
            echo "No update candidates found."
          else
            echo "Found ${#CANDS[@]} candidate(s)."
          fi

          # helpers to numeric-compare major.minor
          num_from_mm() {
            local mm="$1"
            local maj=$(echo "$mm" | awk -F. '{print $1}')
            local min=$(echo "$mm" | awk -F. '{print $2+0}')
            echo $((maj * 1000 + min))
          }

          GV_FULL=$(go version | awk '{print $3}' | sed 's/^go//')
          GV_MM=$(echo "$GV_FULL" | awk -F. '{print $1"."$2}')
          CUR_NUM=$(num_from_mm "$GV_MM")
          echo "Current Go runtime: $GV_FULL (major.minor: $GV_MM)"

          UPGRADES=()
          for L in "${CANDS[@]}"; do
            PATH_MOD=$(echo "$L" | awk '{print $1}')
            CURVER=$(echo "$L" | awk '{print $2}')
            UPDVER=$(echo "$L" | awk '{print $3}')
            [ -n "$PATH_MOD" ] || continue
            [ -n "$UPDVER" ] || continue

            # major check
            CURMAJ=$(echo "${CURVER}" | sed 's/^v//' | cut -d. -f1)
            UPDMAJ=$(echo "${UPDVER}" | sed 's/^v//' | cut -d. -f1)
            if [ "$CURMAJ" != "$UPDMAJ" ]; then
              echo "Skipping $PATH_MOD: major bump candidate $CURMAJ -> $UPDMAJ"
              continue
            fi

            # Query the candidate's module metadata for its Go version (if any)
            echo "Inspecting ${PATH_MOD}@${UPDVER} for Go requirement..."
            MODJSON=$(go list -m -json "${PATH_MOD}@${UPDVER}" 2>/dev/null || true)
            REQ_GO=$(printf '%s' "$MODJSON" | jq -r '.GoVersion // empty' 2>/dev/null || true)
            if [ -z "$REQ_GO" ]; then
              REQ_GO="1.0"
            fi
            REQ_MM=$(echo "${REQ_GO}" | awk -F. '{print $1"."$2}')
            REQ_NUM=$(num_from_mm "${REQ_MM}")

            if [ "${REQ_NUM}" -gt "${CUR_NUM}" ]; then
              echo "Skipping ${PATH_MOD}@${UPDVER}: requires go ${REQ_GO} (current runtime ${GV_MM})"
              continue
            fi

            echo "Will upgrade ${PATH_MOD} -> ${UPDVER} (requires go ${REQ_GO})"
            UPGRADES+=("${PATH_MOD}@${UPDVER}")
          done

          if [ ${#UPGRADES[@]} -eq 0 ]; then
            echo "No safe upgrades to apply for Go ${GV_MM}."
          else
            for m in "${UPGRADES[@]}"; do
              echo "Applying: go get -u ${m}"
              go get -u "${m}"
            done
            go mod tidy
          fi

      - name: Format, vet & lint
        run: |
          set -euo pipefail
          go fix ./...
          go vet ./...
          go fmt ./...
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          ./bin/golangci-lint run || echo "::warning::Lint issues flagged"

      - name: Run tests (race)
        id: test
        continue-on-error: true
        run: |
          set -euo pipefail
          go test -race ./... > test_output.txt 2>&1 || true
          if grep -q FAIL test_output.txt; then
            echo "tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Summarize code changes
        run: |
          set -euo pipefail
          git fetch origin main --tags || true
          git diff origin/main...HEAD > code.diff || true
          {
            echo "## Code Diff Summary"
            echo '```diff'
            head -n 200 code.diff || true
            echo '```'
          } > diff-summary.md

      - name: Optional AI-generated patch (OpenRouter) 
        if: ${{ steps.test.outputs.tests_failed == 'true' }}
        run: |
          set -euo pipefail
          DIFF=$(head -n 200 code.diff || true)
          ERR=$(head -n 200 test_output.txt || true)
          curl -s https://openrouter.ai/api/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "model":"qwen/qwen3-coder:free",
              "messages":[
                {"role":"system","content":"You are a Go refactoring assistant. Given a git diff and test failures, output a patch to fix the code."},
                {"role":"user","content":"Diff:\n'"$DIFF"'\n\nTests:\n'"$ERR"'"}
              ],
              "temperature":0.2,
              "max_tokens":1024
            }' \
            | jq -r '.choices[0].message.content' > patch.diff || echo "::warning::No AI patch returned"

      - name: Apply AI patch
        if: ${{ steps.test.outputs.tests_failed == 'true' }}
        run: |
          set -euo pipefail
          if [ -s patch.diff ]; then
            git apply patch.diff || echo "::warning::AI patch could not be applied"
          else
            echo "::warning::patch.diff empty; skipping"
          fi

      - name: Install git-cliff (robust)
        run: |
          set -euo pipefail
          REPO="orhun/git-cliff"
          API_URL="https://api.github.com/repos/${REPO}/releases/latest"
          RELEASE_JSON=$(curl -sS -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${API_URL}" || true)

          DL_URL=$(printf '%s' "$RELEASE_JSON" | jq -r '.assets[]? | select(.name|test("linux.*(gnu|musl).*tar.gz")) | .browser_download_url' 2>/dev/null | head -n1 || true)
          if [ -z "$DL_URL" ]; then
            echo "::warning::No suitable latest asset found; falling back to pinned v2.10.0"
            DL_URL="https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz"
          fi

          TMP_ARCH="/tmp/git-cliff.tar.gz"
          curl -sSL --retry 3 --retry-delay 2 "$DL_URL" -o "$TMP_ARCH"
          TMP_DIR="/tmp/git-cliff-extract-$$"
          mkdir -p "$TMP_DIR"
          tar -xzf "$TMP_ARCH" -C "$TMP_DIR"
          BIN_PATH=$(find "$TMP_DIR" -type f -name git-cliff -perm /111 -print -quit || true)
          if [ -z "$BIN_PATH" ]; then
            echo "tar contents (for debug):"
            tar -tzf "$TMP_ARCH" || true
            echo "::error::git-cliff binary not found in archive"
            exit 1
          fi
          sudo install -m 0755 "$BIN_PATH" /usr/local/bin/git-cliff
          /usr/local/bin/git-cliff --version || true

      - name: Generate changelog with git-cliff
        run: |
          set -euo pipefail
          git fetch --tags || true
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          if [ -n "$PREV_TAG" ]; then
            git-cliff --rev-range "$PREV_TAG..HEAD" --output CHANGELOG.md || true
          else
            git-cliff --output CHANGELOG.md || true
          fi
          echo "## Changelog Diff" > changelog.md
          cat CHANGELOG.md >> changelog.md || true

      - name: Prepare PR body
        run: |
          set -euo pipefail
          TF="${{ steps.test.outputs.tests_failed }}"
          cat > pr_body.md <<'EOF'
## 🔧 Updates
- Go version → '${{ matrix.go-version }}'
- Dependencies upgraded (safe upgrades only)

## 🧠 Code Diff Summary
$(cat diff-summary.md || true)

## 🤖 AI Patch (if applied)
```diff
$(cat patch.diff || true)
