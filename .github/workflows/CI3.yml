name: CI 3

on:
  schedule:
    - cron: '0 6 * * *'        # Daily at 06:00 UTC
  workflow_dispatch:          # Manual trigger
  pull_request_target:        # Semantic-title enforcement on PRs
    types: [opened, edited, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-go:
    name: Update Go, AI-Patch & Auto-Merge
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    env:
      GO_CACHE_DATE: ${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enforce semantic PR title
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
        uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          githubBaseUrl: https://api.github.com

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules & build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go.sum') }}-${{ env.GO_CACHE_DATE }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Bump go.mod to Go ${{ matrix.go-version }}
        run: sed -i "s/^go .*/go ${{ matrix.go-version }}/" go.mod

      - name: Upgrade dependencies (no major bumps)
        run: |
          set -euo pipefail
          go list -m -u -json all \
            | jq -r 'select(.Update)
                | select((.Version|test("^v[0-9]+")))
                | select((.Update.Version|test("^v[0-9]+")))
                | select((.Update.Version|split(".")[0]) == (.Version|split(".")[0]))
                | .Path' \
            | xargs -r -n1 go get -u
          go mod tidy

      - name: Format, vet & lint
        run: |
          set -euo pipefail
          go fix ./...
          go vet ./...
          go fmt ./...
          # install golangci-lint into ./bin reliably and run it (lint failures won't fail the job)
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          ./bin/golangci-lint run || echo "::warning::Lint issues flagged"

      - name: Run tests with race detector
        id: test
        continue-on-error: true
        run: |
          set -euo pipefail
          go test -race ./... > test_output.txt 2>&1 || true
          if grep -q FAIL test_output.txt; then
            echo "tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Summarize code changes
        run: |
          set -euo pipefail
          git fetch origin main --tags || true
          git diff origin/main...HEAD > code.diff || true
          {
            echo "## Code Diff Summary"
            echo '```diff'
            head -n 100 code.diff || true
            echo '```'
          } > diff-summary.md

      - name: AI-generated patch via OpenRouter
        if: ${{ steps.test.outputs.tests_failed == 'true' }}
        run: |
          set -euo pipefail
          DIFF=$(head -n 100 code.diff || true)
          ERR=$(head -n 50 test_output.txt || true)
          curl -s https://openrouter.ai/api/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "model":"qwen/qwen3-coder:free",
              "messages":[
                {"role":"system","content":"You are a Go refactoring assistant. Given a git diff and test failures, output a patch to fix the code."},
                {"role":"user","content":"Diff:\n'"$DIFF"'\n\nTests:\n'"$ERR"'"}
              ],
              "temperature":0.3,
              "max_tokens":512
            }' \
            | jq -r '.choices[0].message.content' > patch.diff || echo "::warning::No AI patch returned"

      - name: Apply AI patch
        if: ${{ steps.test.outputs.tests_failed == 'true' }}
        run: |
          set -euo pipefail
          if [ -s patch.diff ]; then
            git apply patch.diff || echo "::warning::AI patch could not be applied"
          else
            echo "::warning::patch.diff is empty; skipping apply"
          fi

      - name: Install git-cliff (latest linux release, robust)
        # This step is robust: it finds the appropriate asset, downloads, extracts to a temp dir,
        # finds the binary and installs it. It avoids depending on exact internal archive paths.
        run: |
          set -euo pipefail
          REPO="orhun/git-cliff"
          API_URL="https://api.github.com/repos/${REPO}/releases/latest"
          echo "Querying releases for ${REPO}"
          # fetch latest release JSON (use GH_TOKEN to avoid low unauthenticated rate limits)
          RELEASE_JSON=$(curl -sS -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${API_URL}")

          # Prefer glibc x86_64 linux tar.gz; try matching musl or gnu variants as fallback
          DL_URL=$(echo "$RELEASE_JSON" \
            | jq -r '.assets[]?.browser_download_url as $u | .assets[]?.name as $n | "\($n) \($u)"' \
            | awk '/(x86_64|amd64).*linux.*(gnu|musl).*\.tar\.gz/ { print $2; exit }' || true)

          if [ -z "$DL_URL" ]; then
            echo "No suitable x86_64 linux tar.gz asset found in latest release; falling back to v2.10.0 glibc asset"
            DL_URL="https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz"
          fi

          echo "Downloading asset: $DL_URL"
          TMP_ARCHIVE="/tmp/git-cliff.tar.gz"
          curl -sSL "$DL_URL" -o "$TMP_ARCHIVE"

          TMP_DIR="/tmp/git-cliff-extract-$$"
          mkdir -p "$TMP_DIR"
          tar -xzf "$TMP_ARCHIVE" -C "$TMP_DIR"

          # find the git-cliff binary inside the extracted tree
          BIN_PATH=$(find "$TMP_DIR" -type f -name git-cliff -perm -111 -print -quit || true)

          if [ -z "$BIN_PATH" ]; then
            echo "Binary 'git-cliff' not found in archive — listing archive contents for debugging:" >&2
            tar -tzf "$TMP_ARCHIVE" >&2 || true
            exit 1
          fi

          echo "Installing git-cliff from $BIN_PATH to /usr/local/bin/git-cliff"
          sudo install -m 0755 "$BIN_PATH" /usr/local/bin/git-cliff

          echo "Installed git-cliff version:"
          /usr/local/bin/git-cliff --version

      - name: Generate changelog diff with git-cliff
        run: |
          set -euo pipefail
          git fetch --tags || true
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          if [ -n "$PREV_TAG" ]; then
            echo "Generating changelog for range: $PREV_TAG..HEAD"
            git-cliff --rev-range "$PREV_TAG..HEAD" --output CHANGELOG.md
          else
            echo "No tags found — generating full changelog"
            git-cliff --output CHANGELOG.md
          fi
          echo "## Changelog Diff" > changelog.md
          cat CHANGELOG.md >> changelog.md || true

      - name: Prepare PR body file
        run: |
          set -euo pipefail
          cat > pr_body.md <<'EOF'
          ## 🔧 Updates
          - Go version → `${{ matrix.go-version }}`
          - Dependencies upgraded

          ## 🧠 Code Diff Summary
          $(cat diff-summary.md || true)

          ## 🤖 AI Patch (if applied)
          ```diff
          $(cat patch.diff || true)
          ```

          ## 📜 Changelog Diff
          $(cat changelog.md || true)

          ## ✅ Test Status
          ${{ steps.test.outputs.tests_failed == 'true' && '❌ Tests failed — patch applied' || '✅ All tests passed' }}
          EOF

      - id: create_pr
        name: Create pull request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          commit-message: "chore: bump Go to ${{ matrix.go-version }} + deps"
          title: "chore: bump Go to ${{ matrix.go-version }} + deps"
          body-path: pr_body.md
          branch: update/go-${{ matrix.go-version }}
          labels: |
            maintenance
            automated-update
            ${{ steps.test.outputs.tests_failed == 'true' && 'needs-review' || 'safe-update' }}

      - name: Enable auto-merge on passing PR
        if: ${{ steps.test.outputs.tests_failed == 'false' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: squash

      - id: create_issue
        name: Fallback issue if AI patch fails
        if: ${{ steps.test.outputs.tests_failed == 'true' }}
        uses: peter-evans/create-issue-from-file@v5.0.1
        with:
          title: "⚠️ Go update caused test failures — AI patch could not apply"
          content-filepath: test_output.txt
          labels: |
            bug
            breaking-change
            needs-manual-review
