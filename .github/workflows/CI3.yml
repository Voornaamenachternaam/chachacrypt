name: CI3

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'   # Daily at 06:00 UTC

jobs:
  update-and-test:
    name: Update Go & Dependencies, Run Tests, Auto-Fix
    runs-on: ubuntu-latest
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Fetch latest Go stable version
        id: find-go
        run: |
          echo "Fetching latest Go release…"
          JSON=$(curl -fsSL https://go.dev/dl/?mode=json)
          LATEST=$(echo "$JSON" \
            | jq -r 'map(select(.stable==true)) | first | .version' \
            | sed 's/^go//')
          echo "LATEST=$LATEST" >> $GITHUB_ENV
          echo "Latest Go version: $LATEST"

      - name: Set up Go ${{ env.LATEST }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.LATEST }}

      - name: Ensure go.mod uses Go ${{ env.LATEST }}
        run: |
          sed -i "s/^go .*/go ${{ env.LATEST }}/" go.mod

      - name: Tidy modules
        run: |
          go mod tidy

      - name: Upgrade all dependencies
        run: |
          go get -u ./...
          go mod tidy

      - name: Format & Vet
        run: |
          go fmt ./...
          go vet ./...

      - name: Verify module checksums
        run: |
          go mod verify

      - name: Run unit tests
        run: |
          go test ./... -timeout 5m | tee test-output.txt

      - name: Run security scan (gosec)
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./... | tee gosec-output.txt
        continue-on-error: true

      - name: Aggregate context for AI
        run: |
          {
            echo "Go version: ${{ env.LATEST }}"
            echo "=== go.mod ===";   cat go.mod
            echo "=== go.sum ===";   cat go.sum 2>/dev/null || echo "<no go.sum>"
            echo "=== Test output ===";    cat test-output.txt
            echo "=== Gosec output ===";   cat gosec-output.txt
          } > ai-context.txt

      - name: AI analysis & automatic fixes
        if: env.OPENROUTER_API_KEY != ''
        run: |
          echo "Calling DeepSeek for code analysis & fixes…"
          curl -s \
            -X POST "https://openrouter.ai/api/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -d @- << 'EOF' > ai-response.json
          {
            "model": "deepseek/deepseek-r1:free",
            "messages": [
              {
                "role": "system",
                "content": "You are a senior Go developer and security expert. Identify any compilation errors, test failures, or dependency compatibility issues with Go ${{ env.LATEST }}. Produce a single unified patch in diff format that fixes imports, adjusts or replaces incompatible dependencies, corrects code errors, and passes all tests and security scans."
              },
              {
                "role": "user",
                "content": "$(jq -Rs . < ai-context.txt)"
              }
            ],
            "temperature": 0.1
          }
          EOF

          # Extract only the diff block between ```diff fences```
          jq -r '.choices[0].message.content' ai-response.json \
            | sed -n -e '/^```diff/,/^```/!d' -e '1d' -e '$d' \
            > fixes.diff || true

          if [ ! -s fixes.diff ]; then
            echo "::notice ::No diff found in AI response; skipping patch."
            exit 0
          fi

          echo "Validating AI-generated patch…"
          if git apply --check fixes.diff; then
            echo "Patch is valid; applying…"
            git apply --whitespace=fix fixes.diff
          else
            echo "::warning ::Patch failed git apply --check; leaving fixes.diff for review."
            ls -l fixes.diff
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/auto-update/go-${{ env.LATEST }}
          commit-message: |
            chore(ci): bump Go to ${{ env.LATEST }}, refresh deps & apply AI fixes
          title: "CI: Update to Go ${{ env.LATEST }} + auto-fix deps & code"
          body: |
            **Automated updates:**
            - Go toolchain bumped to **${{ env.LATEST }}**
            - Dependencies upgraded via `go get -u ./...`
            - `go fmt`, `go vet`, `go mod tidy` & `go mod verify` passed
            - Unit tests and `gosec` security scan passed
            - AI-generated patch (if applicable) applied to fix any compatibility or code errors
          labels: automated
          draft: false

      - name: Skip AI fixes (no API key)
        if: env.OPENROUTER_API_KEY == ''
        run: |
          echo "::warning ::OPENROUTER_API_KEY is not set; skipping AI analysis and patching."
