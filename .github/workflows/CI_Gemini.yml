# .github/workflows/CI_Gemini.yml
name: CI_Gemini

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

permissions:
  contents: write
  checks: write
  pull-requests: write

concurrency:
  group: ci-gemini
  cancel-in-progress: false

jobs:
  update-and-refactor:
    name: Automated dependency & toolchain update with AI refactor
    runs-on: ubuntu-latest
    env:
      AI_MODEL: "tngtech/deepseek-r1t2-chimera:free"
      API_URL: "https://openrouter.ai/api/v1/chat/completions"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git
        run: |
          git config user.name "ci-gemini-bot"
          git config user.email "ci-gemini-bot@users.noreply.github.com"

      - name: Set up Go (stable)
        uses: actions/setup-go@v6
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Run Gitleaks scan (artifact only)
        uses: gitleaks/gitleaks-action@v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: "true"
        # The action will scan the repository and upload an artifact if configured.

      - name: Ensure ai_refactor script is executable
        run: chmod +x ./.github/scripts/ai_refactor.sh

      - name: Run automated updates + AI refactor
        id: run_refactor
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          ./.github/scripts/ai_refactor.sh dependencies "${{ env.API_URL }}" "${{ env.AI_MODEL }}"

      - name: Install golangci-lint binary (using official action, binary install)
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.0
          install-mode: binary
          args: --version

      - name: Run golangci-lint and save output
        run: |
          set -euo pipefail
          # capture linter output as JSON (do not fail workflow if lint finds issues)
          if golangci-lint run ./... --out-format json --issues-exit-code=0 2>&1 | tee linter.log; then
            echo "golangci-lint completed."
          else
            echo "golangci-lint completed with reported issues; see linter.log"
          fi

      - name: Upload artifacts (AI request/response, patch, logs, diffs)
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ci-gemini-artifacts
          path: |
            ai-request.json
            ai-response.json
            ai.patch
            tests.log
            linter.log
            gitleaks.log
            pre-ai.diff
            push.log

      - name: Final status
        if: always()
        run: |
          echo "CI_Gemini finished. Check artifacts for AI request/response, linter, gitlea ks and logs."
