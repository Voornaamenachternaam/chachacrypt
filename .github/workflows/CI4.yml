name: CI Auto-update (safe & robust)

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

env:
  # Allowed file globs (space-separated). AI diffs proposing changes outside these will be rejected.
  ALLOWED_PATTERNS: |
    *.go
    go.mod
    go.sum
    *.yml
    *.yaml
    *.md
    Dockerfile
    Makefile
    .gitattributes
    .github/**

jobs:
  update-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Resolve latest stable Go version (sanitized)
        id: resolve-go
        run: |
          set -euo pipefail
          JSON=$(curl -fsSL "https://go.dev/dl/?mode=json")
          RAW=$(echo "$JSON" | jq -r 'map(select(.stable==true))[0].version' 2>/dev/null || true)
          if [ -z "$RAW" ] || [ "$RAW" = "null" ]; then
            echo "Could not determine latest stable Go; defaulting to 1.25.0"
            RAW="go1.25.0"
          fi
          # strip leading "go" if present, keep only MAJOR.MINOR.PATCH (drop any extra components)
          VER=$(echo "$RAW" | sed -E 's/^go//; s/^([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          # ensure matches X.Y.Z
          if ! echo "$VER" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Resolved version '$VER' is not in X.Y.Z format; falling back to 1.25.0"
            VER="1.25.0"
          fi
          echo "SANITIZED_GO=${VER}" >> $GITHUB_ENV
          echo "Sanitized Go version: ${VER}"
      - name: Set up Go ${{ env.SANITIZED_GO }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.SANITIZED_GO }}
          check-latest: true

      - name: Print environment
        run: |
          go version
          go env
          uname -a || true

      - name: Update go.mod 'go' directive (safe, atomic)
        id: update-gomod
        run: |
          set -euo pipefail
          NEW="${SANITIZED_GO}"
          if [ ! -f go.mod ]; then
            echo "No go.mod found; creating one with 'go ${NEW}'"
            printf "module chachacrypt\n\ngo %s\n" "$NEW" > go.mod
            git add go.mod
            echo "go.mod.updated=true" >> $GITHUB_ENV
            exit 0
          fi
          # Replace only the 'go X' directive line (first occurrence), preserving rest of file.
          awk -v v="$NEW" 'BEGIN{replaced=0}
            /^go [0-9]+\.[0-9]+(\.[0-9]+)?$/ {
              if (!replaced) { print "go " v ; replaced=1; next }
            }
            { print }
            END { if (!replaced) printf("go %s\n", v) }' go.mod > go.mod.tmp
          # Validate the new go.mod parses
          mv go.mod.tmp go.mod
          # Use `go mod tidy` to ensure it's valid before staging
          if ! go mod tidy; then
            echo "go mod tidy failed after updating go directive; aborting"
            git diff -- go.mod || true
            exit 1
          fi
          git add go.mod go.sum || true
          echo "go.mod.updated=true" >> $GITHUB_ENV

      - name: Upgrade dependencies (best-effort) and tidy
        run: |
          set -euo pipefail
          # Attempt a conservative upgrade (safe): update to latest compatible versions
          # WARNING: `go get -u ./...` can be noisy; we try but don't force it to break the workflow early
          echo "Running go get -u ./... (best-effort)"
          if ! go get -u ./... 2>&1 | tee go-get-output.txt; then
            echo "go get had issues; continuing to go mod tidy to produce deterministic module files"
          fi
          # Always run tidy and fail if go.mod is invalid
          go mod tidy
          git add go.mod go.sum || true

      - name: Format files and stage formatting changes
        run: |
          set -euo pipefail
          gofmt -w .
          git add -A

      - name: Run go vet (capture)
        id: vet
        run: |
          set +e
          go vet ./... 2>&1 | tee vet-output.txt
          echo "VET_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Verify modules
        run: go mod verify

      - name: Run tests (capture)
        id: tests
        run: |
          set +e
          go test ./... -v -timeout 5m 2>&1 | tee test-output.txt
          echo "TEST_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Run gosec (capture)
        id: sec
        run: |
          set +e
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./... 2>&1 | tee gosec-output.txt
          echo "GOSEC_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Truncate logs for AI (if used)
        run: |
          head -n 500 vet-output.txt   > vet-trunc.txt || true
          head -n 500 test-output.txt  > test-trunc.txt || true
          head -n 500 gosec-output.txt > gosec-trunc.txt || true

      - name: Build AI context
        run: |
          {
            echo "Go: ${SANITIZED_GO}"
            echo "=== vet ===";   cat vet-trunc.txt || true
            echo "=== tests ==="; cat test-trunc.txt || true
            echo "=== gosec ==="; cat gosec-trunc.txt || true
          } > ai-context1.txt

      - name: AI pass #1 – propose fixes (optional)
        if: env.OPENROUTER_API_KEY != ''
        run: |
          set -euo pipefail
          PROMPT='You are a senior Go engineer. Fix vet errors, failing tests, and gosec issues shown in the context. Return a git-style unified diff (diff --git a/... b/...). Only modify files related to Go code, go.mod, go.sum, CI files, or docs.'
          jq -nc --arg model "deepseek/deepseek-r1:free" \
            --arg system "$PROMPT" \
            --arg user "$(jq -Rs . < ai-context1.txt)" \
            '{model:$model, messages:[{role:"system",content:$system},{role:"user",content:$user}],temperature:0.05}' \
            > ai-req1.json

          RESP=$(curl -s -X POST https://openrouter.ai/api/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -d @ai-req1.json || true)

          echo "$RESP" | jq -r '.choices[0].message.content // empty' > ai-raw1.txt || true
          # Extract the git diff block(s)
          sed -n '/^diff --git a\//,$p' ai-raw1.txt > fixes1.diff || true

          if [ -s fixes1.diff ]; then
            echo "AI produced a diff; validating files..."
            files=$(sed -n 's/^+++ b\///p' fixes1.diff | sed 's/\t.*$//' | sed '/^$/d' | uniq)
            echo "$files"

            # Validate each file against ALLOWED_PATTERNS
            IFS=$'\n'
            for f in $files; do
              ok=false
              for pat in $(echo "$ALLOWED_PATTERNS"); do
                case "$f" in
                  $pat) ok=true; break;;
                esac
              done
              if [ "$ok" = "false" ]; then
                echo "ERROR: AI wants to change disallowed path: $f"
                exit 1
              fi
              # Disallow extensionless arbitrary new files except known safe names
              base=$(basename "$f")
              if [[ "$base" != *.* ]]; then
                case "$base" in
                  Dockerfile|Makefile|README|LICENSE|.gitattributes) ;;
                  *)
                    echo "ERROR: Disallowed creation/modification of extensionless file: $f"
                    exit 1
                esac
              fi
            done
            unset IFS

            # Dry-run apply check
            if git apply --check fixes1.diff; then
              git apply --whitespace=fix fixes1.diff
              git add -A
            else
              echo "git apply --check failed for fixes1.diff"
              sed -n '1,200p' fixes1.diff || true
              exit 1
            fi
          else
            echo "No AI diff produced."
          fi

      - name: Build check (capture)
        id: build
        run: |
          set +e
          go build ./... 2>&1 | tee build-output.txt
          echo "BUILD_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Truncate build log
        run: head -n 200 build-output.txt > build-trunc.txt || true

      - name: AI pass #2 – fix build errors (optional)
        if: env.OPENROUTER_API_KEY != '' && env.BUILD_EXIT == '1'
        run: |
          set -euo pipefail
          PROMPT='Build failed. Fix remaining compilation errors so `go build ./...` succeeds. Return a git-style unified diff.'
          jq -nc --arg model "deepseek/deepseek-r1:free" \
            --arg system "$PROMPT" \
            --arg user "$(jq -Rs . < build-trunc.txt)" \
            '{model:$model, messages:[{role:"system",content:$system},{role:"user",content:$user}],temperature:0.05}' \
            > ai-req2.json

          RESP=$(curl -s -X POST https://openrouter.ai/api/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -d @ai-req2.json || true)

          echo "$RESP" | jq -r '.choices[0].message.content // empty' > ai-raw2.txt || true
          sed -n '/^diff --git a\//,$p' ai-raw2.txt > fixes2.diff || true

          if [ -s fixes2.diff ]; then
            files=$(sed -n 's/^+++ b\///p' fixes2.diff | sed 's/\t.*$//' | sed '/^$/d' | uniq)
            IFS=$'\n'
            for f in $files; do
              ok=false
              for pat in $(echo "$ALLOWED_PATTERNS"); do
                case "$f" in
                  $pat) ok=true; break;;
                esac
              done
              if [ "$ok" = "false" ]; then
                echo "ERROR: AI build-fix touches disallowed path: $f"
                exit 1
              fi
            done
            unset IFS

            if git apply --check fixes2.diff; then
              git apply --whitespace=fix fixes2.diff
              git add -A
            else
              echo "git apply --check failed for fixes2.diff"
              sed -n '1,200p' fixes2.diff || true
              exit 1
            fi
          else
            echo "No AI build-fix diff produced."
          fi

      - name: Final build & tests (must succeed before PR)
        run: |
          set -euo pipefail
          go build ./...
          go test ./... -v

      - name: Commit & push (if changes)
        id: commit
        run: |
          set -euo pipefail
          if git diff --cached --quiet; then
            echo "No staged changes to commit."
            echo "CHANGES_PRESENT=false" >> $GITHUB_ENV
            exit 0
          fi
          SHORT=$(git rev-parse --short=8 HEAD)
          BRANCH="ci/auto-update/go-${SANITIZED_GO}-${SHORT}-${{ github.run_id }}"
          git checkout -b "$BRANCH"
          git commit -m "chore(ci): bump Go ${SANITIZED_GO}, upgrade deps & apply automated fixes" || true
          git push --set-upstream origin "$BRANCH"
          echo "PUSHED_BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "CHANGES_PRESENT=true" >> $GITHUB_ENV

      - name: Create Pull Request (only if changes)
        if: env.CHANGES_PRESENT == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ env.GH_TOKEN }}
          branch: ${{ env.PUSHED_BRANCH }}
          commit-message: "chore(ci): bump Go to ${{ env.SANITIZED_GO }}, upgrade deps & apply automated fixes"
          title: "CI: Go ${{ env.SANITIZED_GO }} + automated fixes"
          body: |
            Automated update:
            - Go: ${{ env.SANITIZED_GO }}
            - Vet exit: ${{ env.VET_EXIT }}
            - Test exit: ${{ env.TEST_EXIT }}
            - Gosec exit: ${{ env.GOSEC_EXIT }}
            - Build exit: ${{ env.BUILD_EXIT }}
          labels: automated
          draft: false

      - name: Cleanup (always)
        if: always()
        run: |
          rm -f ai-req*.json ai-raw*.txt fixes*.diff ai-context1.txt \
                vet-output.txt test-output.txt gosec-output.txt \
                vet-trunc.txt test-trunc.txt gosec-trunc.txt \
                build-output.txt build-trunc.txt go-get-output.txt || true
