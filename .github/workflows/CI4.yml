name: CI

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  update-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      DEFAULT_BRANCH: main
      ALLOWED_PATTERNS: |
        *.go
        go.mod
        go.sum
        *.yml
        *.yaml
        *.md
        Dockerfile
        Makefile
        .gitattributes
        .github/**
      NEW_FILE_ALLOWLIST: |
        Makefile
        Dockerfile
        README.md
        LICENSE
        .gitattributes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ env.DEFAULT_BRANCH }}

      - name: Fetch latest Go version
        id: go-version
        run: |
          JSON=$(curl -fsSL https://go.dev/dl/?mode=json)
          RAW=$(echo "$JSON" | jq -r 'map(select(.stable==true))[0].version')
          # Strip "go" prefix (e.g. go1.25.0 -> 1.25.0)
          VERS=${RAW#go}
          # Normalize: drop trailing ".0" if present (1.25.0 -> 1.25, but keep 1.25.1)
          SANITIZED=$(echo "$VERS" | sed -E 's/([0-9]+\.[0-9]+)\.0$/\1/')
          echo "SANITIZED_GO=$SANITIZED" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.SANITIZED_GO }}

      - name: Update go.mod version
        run: |
          if grep -qE '^go [0-9]+\.[0-9]+' go.mod; then
            sed -i -E "s/^go [0-9]+\.[0-9]+(\.[0-9]+)?/go ${{ env.SANITIZED_GO }}/" go.mod
          else
            echo "go ${{ env.SANITIZED_GO }}" >> go.mod
          fi
          git add go.mod

      - name: Upgrade dependencies
        run: |
          go get -u ./... || true
          go mod tidy

      - name: Format code
        run: go fmt ./...

      - name: Run go vet
        run: |
          set +e
          go vet ./... 2>&1 | tee vet-output.txt
          echo "VET_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Run tests
        run: |
          set +e
          go test ./... -timeout 5m 2>&1 | tee test-output.txt
          echo "TEST_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Run gosec
        run: |
          set +e
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./... 2>&1 | tee gosec-output.txt
          echo "GOSEC_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Run build
        run: |
          set +e
          go build ./... 2>&1 | tee build-output.txt
          echo "BUILD_EXIT=$?" >> $GITHUB_ENV
          set -e

      - name: Collect logs
        run: |
          head -n 500 vet-output.txt   > vet-trunc.txt
          head -n 500 test-output.txt  > test-trunc.txt
          head -n 500 gosec-output.txt > gosec-trunc.txt
          head -n 200 build-output.txt > build-trunc.txt

      - name: Build AI context
        run: |
          {
            echo "Go version: ${{ env.SANITIZED_GO }}"
            echo "=== vet ===";   cat vet-trunc.txt
            echo "=== tests ==="; cat test-trunc.txt
            echo "=== gosec ==="; cat gosec-trunc.txt
            echo "=== build ==="; cat build-trunc.txt
          } > ai-context.txt

      - name: AI fix pass
        if: env.OPENROUTER_API_KEY != ''
        run: |
          set -euo pipefail
          jq -nc \
            --arg model "deepseek/deepseek-r1:free" \
            --arg system "You are a senior Go engineer. Fix vet/test/gosec/build issues shown in the context. Return a git-style unified diff only." \
            --arg user "$(jq -Rs . < ai-context.txt)" \
            '{model:$model, messages:[{role:"system",content:$system},{role:"user",content:$user}],temperature:0.05}' \
            > ai-req.json

          RESP=$(curl -s -X POST https://openrouter.ai/api/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -d @ai-req.json || true)

          echo "$RESP" | jq -r '.choices[0].message.content // empty' > ai-raw.txt || true
          sed -n '/^diff --git a\//,$p' ai-raw.txt > fixes.diff || true

          if [ ! -s fixes.diff ]; then
            echo "AI_DIFF_PRODUCED=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "AI_DIFF_PRODUCED=true" >> $GITHUB_ENV

          files=$(sed -n 's/^+++ b\///p' fixes.diff | sed 's/\t.*$//' | sed '/^$/d' | uniq)
          echo "$files" > ai-files.txt

          IFS=$'\n'
          for f in $files; do
            if git ls-files --error-unmatch -- "$f" > /dev/null 2>&1; then
              continue
            fi
            ok=false
            for pat in $(echo "${NEW_FILE_ALLOWLIST}"); do
              if [ "$f" = "$pat" ] || [[ "$f" == ${pat%/}/* ]]; then
                ok=true
                break
              fi
            done
            if [ "$ok" = "false" ]; then
              echo "Rejected new file: $f"
              cp fixes.diff fixes-rejected.diff || true
              exit 1
            fi
          done
          unset IFS

          if git apply --check fixes.diff; then
            git apply --whitespace=fix fixes.diff
            git add -A
            echo "AI_DIFF_APPLIED=true" >> $GITHUB_ENV
          else
            cp fixes.diff fixes-unapplied.diff || true
            echo "AI_DIFF_APPLIED=false" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: ci-logs
          path: |
            vet-output.txt
            test-output.txt
            gosec-output.txt
            build-output.txt
            vet-trunc.txt
            test-trunc.txt
            gosec-trunc.txt
            build-trunc.txt
            ai-context.txt
            ai-raw.txt
            fixes.diff
            fixes-unapplied.diff
            fixes-rejected.diff
            ai-files.txt
          if-no-files-found: ignore

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ env.GH_TOKEN }}
          branch: ci/auto-update/go-${{ env.SANITIZED_GO }}-${{ github.run_id }}
          base: ${{ env.DEFAULT_BRANCH }}
          commit-message: "chore(ci): bump Go to ${{ env.SANITIZED_GO }}, upgrade deps & apply AI fixes"
          title: "CI: Go ${{ env.SANITIZED_GO }} + automated fixes"
          body: |
            Automated update
            - Go: ${{ env.SANITIZED_GO }}
            - Vet exit: ${{ env.VET_EXIT }}
            - Test exit: ${{ env.TEST_EXIT }}
            - Gosec exit: ${{ env.GOSEC_EXIT }}
            - Build exit: ${{ env.BUILD_EXIT }}
            - AI diff produced: ${{ env.AI_DIFF_PRODUCED }}
            - AI diff applied: ${{ env.AI_DIFF_APPLIED }}
          labels: automated
          draft: false
