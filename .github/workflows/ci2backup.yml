name: CI_Gemini

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

permissions:
  contents: write
  pull-requests: write
  checks: write

concurrency:
  group: ci-gemini
  cancel-in-progress: false

env:
  API_URL: "https://openrouter.ai/api/v1/chat/completions"
  AI_MODEL: "x-ai/grok-4-fast:free"

jobs:
  ai-deps:
    runs-on: ubuntu-latest
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      # BASE_BRANCH is evaluated at workflow runtime and injected into the job
      BASE_BRANCH: ${{ github.ref_name }}

    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git
        run: |
          git config user.name "ci-gemini-bot"
          git config user.email "ci-gemini-bot@users.noreply.github.com"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install golangci-lint (recommended action)
        uses: golangci/golangci-lint-action@v8
        with:
          version: v1.64.2

      - name: Ensure scripts are executable
        run: |
          chmod +x .github/scripts/ai_refactor.sh || true
          chmod +x .github/scripts/auto_fix_lints.sh || true

      - name: Inject reasoning config into AI payload (enable include_reasoning + high effort)
        run: |
          python - <<'PY'
import io,sys,os,re
p = ".github/scripts/ai_refactor.sh"
s = open(p, "r", encoding="utf-8").read()
old = "max_tokens: 32768\n    }"
if old in s:
    new = 'max_tokens: 32768,\n      include_reasoning: true,\n      reasoning: { effort: \"high\" }\n    }'
    s = s.replace(old, new)
    open(p, "w", encoding="utf-8").write(s)
    print("Patched build_payload to include reasoning.")
else:
    # attempt a safer insertion near the max_tokens assignment if formatting differs
    s2 = re.sub(r'(max_tokens:\s*\d+\s*\n\s*\})', 'max_tokens: 32768,\n      include_reasoning: true,\n      reasoning: { effort: "high" }\n    }', s, count=1)
    if s2 != s:
        open(p, "w", encoding="utf-8").write(s2)
        print("Patched build_payload via regex.")
    else:
        print("Warning: Could not patch ai_refactor.sh automatically; please verify build_payload block.", file=sys.stderr)
        sys.exit(0)
PY

      - name: Run AI refactor (produces ai.patch and logs in workspace)
        id: run_refactor
        env:
          API_URL: ${{ env.API_URL }}
          AI_MODEL: ${{ env.AI_MODEL }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          # this script writes ai.patch and related artifacts into the repo workspace
          ./.github/scripts/ai_refactor.sh dependencies "${API_URL}" "${AI_MODEL}"

      - name: Preserve AI artifacts (copy created files from any temp locations)
        run: |
          # The script attempts to copy artifacts into the repo workspace; ensure they are present
          ls -lah || true
          test -f ai.patch || echo "ai.patch not found (no changes suggested)"; true

      - name: Restore workspace to the original branch state
        if: always()
        run: |
          set -euxo pipefail
          # Ensure we reset to the checked-out base branch as it was at workflow start.
          git fetch --no-tags origin +refs/heads/${BASE_BRANCH}:refs/remotes/origin/${BASE_BRANCH} || true
          # Checkout local base branch
          git checkout --force "${BASE_BRANCH}"
          # Reset hard to remote base to remove any in-workspace changes the script may have made
          git reset --hard "origin/${BASE_BRANCH}" || true
          git clean -fdx || true

      - name: Apply AI patch (if present)
        id: apply_patch
        run: |
          set -euo pipefail
          if [ -f ai.patch ]; then
            # Try a dry apply first to detect problems
            if git apply --check ai.patch; then
              git apply ai.patch
              echo "Applied ai.patch"
            else
              echo "ai.patch failed git apply --check; writing ai.patch to artifact and continuing."
              exit 0
            fi
          else
            echo "No ai.patch to apply."
          fi

      - name: Show git status / changes
        if: always()
        run: |
          echo "Changed files:"
          git status --porcelain
          git --no-pager diff --name-only || true

      - name: Create Pull Request for Go/module changes only
        if: success() && steps.apply_patch.outcome == 'success'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "chore: automated dependency updates and AI refactor"
          title: "chore(deps): Automated dependency updates and AI refactor"
          body: |
            Automated dependency updates and AI-driven refactor were applied by CI. Please review the changes.
          branch: automated-deps
          branch-suffix: timestamp
          delete-branch: true
          add-paths: |
            **/*.go
            go.mod
            go.sum

      - name: Run golangci-lint and capture output
        run: |
          set -euo pipefail
          if golangci-lint run ./... 2>&1 | tee linter.log; then
            echo "golangci-lint completed without fatal errors."
          else
            echo "golangci-lint reported issues; see linter.log."
          fi

      - name: Run tests and capture output
        run: |
          set -euo pipefail
          go test ./... 2>&1 | tee tests.log || true

      - name: Run gofmt check (capture)
        run: |
          set -euo pipefail
          gofmt -l . > gofmt.list || true
          if [ -s gofmt.list ]; then
            echo "Files that need gofmt:"
            cat gofmt.list
          fi

      - name: Save CI artifacts (AI request/response, patch, logs, diffs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-gemini-artifacts
          path: |
            ai-request.json
            ai-response.json
            ai-response-raw.txt
            ai.patch
            tests.log
            linter.log
            gitleaks.json
            pre-ai.diff
            push.log
            gofmt.list

      - name: Final status
        if: always()
        run: echo "CI_Gemini workflow finished."
