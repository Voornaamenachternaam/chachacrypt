name: golangci-lint
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  golangci:
    strategy:
      matrix:
        go: [stable]
        os: [ubuntu-latest, windows-latest]
    name: lint
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ matrix.go }}

      - name: Install golangci-lint (binary) — do not fail job if install reports non-zero
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v2.5.0
          install-mode: binary
          # Turn off the action's internal cache to satisfy "do not use any caching"
          skip-cache: true
          skip-save-cache: true
          # verification is fine to keep on; installer verifies release checksum by default
          verify: true
        continue-on-error: true

      - name: Run golangci-lint (linux/mac)
        if: runner.os != 'Windows'
        id: run-golangci-linux
        continue-on-error: true
        shell: bash
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          # Create artifacts dir
          mkdir -p artifacts

          # Ensure we run at repo root
          cd "${GITHUB_WORKSPACE:-$PWD}"

          # Run golangci-lint if installed; capture json + stdout/stderr; do not fail the step
          if command -v golangci-lint >/dev/null 2>&1; then
            # JSON output (if supported) and capture stderr
            golangci-lint run --out-format json ./... > artifacts/golangci.json 2> artifacts/golangci.stderr || true
            # Also keep a human readable stdout capture for quick glance
            golangci-lint run ./... > artifacts/golangci.stdout 2>> artifacts/golangci.stderr || true
            golangci-lint --version > artifacts/golangci.version 2>&1 || true
          else
            echo "golangci-lint binary not found; installation may have failed" > artifacts/golangci.stderr
            echo "golangci-lint missing" > artifacts/golangci.version
          fi

          # Add run metadata and exit code file for convenience (0 here — we do not fail the job)
          echo "ran_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" > artifacts/runinfo.txt || true
          echo "exit_code=0" > artifacts/exitcode.txt || true

      - name: Run golangci-lint (windows)
        if: runner.os == 'Windows'
        id: run-golangci-windows
        continue-on-error: true
        shell: pwsh
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          Set-Location -Path $Env:GITHUB_WORKSPACE

          if (Get-Command golangci-lint -ErrorAction SilentlyContinue) {
            # JSON output; PowerShell redirection used; allow non-zero exit without failing pipeline
            & golangci-lint run --out-format json ./... > artifacts/golangci.json 2> artifacts/golangci.stderr || Write-Output "lint returned non-zero"
            & golangci-lint run ./... > artifacts/golangci.stdout 2>> artifacts/golangci.stderr || Write-Output "lint returned non-zero (text output)"
            & golangci-lint --version > artifacts/golangci.version 2>&1 || Write-Output "version check failed"
          } else {
            "golangci-lint binary not found; installation may have failed" | Out-File artifacts/golangci.stderr -Encoding utf8
            "golangci-lint missing" | Out-File artifacts/golangci.version -Encoding utf8
          }

          (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ") | Out-File -FilePath artifacts/runinfo.txt -Encoding ascii
          "exit_code=0" | Out-File -FilePath artifacts/exitcode.txt -Encoding ascii

      - name: Upload golangci-lint artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: golangci-lint-results-${{ matrix.os }}
          path: artifacts/
          retention-days: 7
