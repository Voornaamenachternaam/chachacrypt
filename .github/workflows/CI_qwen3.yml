name: CI_qwen3
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  ARTIFACT_DIR: ci-artifacts/combined

jobs:
  check:
    name: Lint • Build • Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        go: [ "stable" ]
    steps:
      - name: Checkout (authenticated)
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GH2_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

      - name: Cache modules & build cache
        uses: actions/cache@v4.3.0
        with:
          path: |
            ~/.cache/go-build
            ${{ runner.os }}-go-mod-cache
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Install small tooling & run checks
        shell: bash
        run: |
          set -eux
          mkdir -p "${{ env.ARTIFACT_DIR }}"
          # install golangci-lint v2.5.0
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b "${GOBIN:-$HOME/go/bin}" v2.5.0 || true
          # install goimports to GOBIN (or $HOME/go/bin if GOBIN not set)
          go install golang.org/x/tools/cmd/goimports@latest
          # ensure $GOBIN (or $HOME/go/bin) is on PATH for the rest of the job
          echo "${GOBIN:-$HOME/go/bin}" >> $GITHUB_PATH
          # sanity check
          command -v goimports || true

          # run checks and store outputs
          export PATH="${GOBIN:-$HOME/go/bin}:$PATH"
          golangci-lint run --timeout=10m --out-format json ./... > "${{ env.ARTIFACT_DIR }}/golangci.json" 2> "${{ env.ARTIFACT_DIR }}/golangci.stderr" || true
          go build ./... > "${{ env.ARTIFACT_DIR }}/go-build-output.txt" 2>&1 || true
          go test ./... > "${{ env.ARTIFACT_DIR }}/go-test-output.txt" 2>&1 || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v5.0.0
        with:
          name: matrix-artifacts-${{ matrix.os }}
          path: ${{ env.ARTIFACT_DIR }}

  ai:
    name: AI refactor & PR
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout (authenticated)
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GH2_TOKEN }}

      - name: Download artifacts (matrix)
        uses: actions/download-artifact@v6.0.0
        with:
          name: matrix-artifacts-ubuntu-latest
          path: ci-artifacts/ubuntu-latest || true

      - name: Download artifacts (windows)
        if: always()
        uses: actions/download-artifact@v6.0.0
        with:
          name: matrix-artifacts-windows-latest
          path: ci-artifacts/windows-latest || true

      - name: Merge artifacts
        shell: bash
        run: |
          mkdir -p "${{ env.ARTIFACT_DIR }}"
          cp -v ci-artifacts/ubuntu-latest/* "${{ env.ARTIFACT_DIR }}/" 2>/dev/null || true
          cp -v ci-artifacts/windows-latest/* "${{ env.ARTIFACT_DIR }}/" 2>/dev/null || true
          ls -la "${{ env.ARTIFACT_DIR }}" || true

      - name: Ensure AI script is executable
        run: chmod +x .github/scripts/ai_refactor.sh

      - name: Run AI refactor script
        id: ai_run
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GH2_TOKEN: ${{ secrets.GH2_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          ./.github/scripts/ai_refactor.sh --artifacts "${{ env.ARTIFACT_DIR }}"

      - name: Create PR (if branch produced)
        if: steps.ai_run.outputs.pr_branch != ''
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH2_TOKEN }}
          branch-token: ${{ secrets.GH2_TOKEN }}
          branch: ${{ steps.ai_run.outputs.pr_branch }}
          base: main
          title: chore "automated dependency & code fixes (AI-assisted)"
          body: |
            Automated PR created by CI. The AI reviewed lint/build/test outputs and applied fixes to go.mod, go.sum, and chachacrypt.go.
          labels: automated, dependencies, ai-assisted
          commit-message: automated change
