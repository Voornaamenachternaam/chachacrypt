name: CI_qwen3

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GOFLAGS: -mod=mod

jobs:
  golangci:
    strategy:
      matrix:
        go: [stable]
        os: [ubuntu-latest, windows-latest]
    name: lint
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ matrix.go }}
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        continue-on-error: true
        with:
          version: v2.5.0
          install-mode: binary
          verify: true
          skip-cache: true
          skip-save-cache: true
          github-token: ${{ secrets.GH2_TOKEN }}
          only-new-issues: false
          problem-matchers: false
          cache-invalidation-interval: 7
          args: --timeout=10m
        env:
          GOFLAGS: -mod=mod
          GOTOOLCHAIN: local

      - name: Prepare artifacts directory
        if: always()
        run: |
          mkdir -p ci-artifacts/${{ matrix.os }}

      - name: Run golangci-lint binary (full checks, JSON) - Linux/Mac
        if: runner.os != 'Windows'
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --timeout=10m --out-format json ./... > ci-artifacts/${{ matrix.os }}/golangci.json 2> ci-artifacts/${{ matrix.os }}/golangci.stderr || true
            golangci-lint run --timeout=10m ./... > ci-artifacts/${{ matrix.os }}/golangci.stdout 2>> ci-artifacts/${{ matrix.os }}/golangci.stderr || true
            golangci-lint --version > ci-artifacts/${{ matrix.os }}/golangci.version 2>&1 || true
          else
            echo "golangci-lint not found in PATH" > ci-artifacts/${{ matrix.os }}/golangci.stderr
          fi

      - name: Run golangci-lint binary (full checks) - Windows
        if: runner.os == 'Windows'
        continue-on-error: true
        shell: pwsh
        run: |
          Set-Location -Path $Env:GITHUB_WORKSPACE
          $outDir = "ci-artifacts/${{ matrix.os }}"
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $exe = Get-Command golangci-lint -ErrorAction SilentlyContinue
          if ($null -ne $exe) {
            & golangci-lint run --timeout=10m --out-format json ./... > "$outDir/golangci.json" 2> "$outDir/golangci.stderr"  || Write-Output "lint returned non-zero"
            & golangci-lint run --timeout=10m ./... > "$outDir/golangci.stdout" 2>> "$outDir/golangci.stderr"  || Write-Output "lint returned non-zero"
            & golangci-lint --version > "$outDir/golangci.version" 2>&1 || Write-Output "version check failed"
          } else {
            "golangci-lint not found" | Out-File "$outDir/golangci.stderr" -Encoding utf8
          }

      - name: Update modules & capture logs (non-fatal)
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          go get -u ./... >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1 || true
          go mod tidy >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1 || true
          go version >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1 || true

      - name: Build & test (capture logs; non-fatal)
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          echo "=== go build ===" >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1
          go build ./... >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1 || true
          echo "=== go test ===" >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1
          go test ./... >> ci-artifacts/${{ matrix.os }}/ai-build.log 2>&1 || true

      - name: Run staticcheck (non-fatal)
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          if command -v staticcheck >/dev/null 2>&1; then
            staticcheck ./... > ci-artifacts/${{ matrix.os }}/staticcheck.txt 2>&1 || true
          else
            GO111MODULE=on go install honnef.co/go/tools/cmd/staticcheck@latest
            export PATH="$PATH:$(go env GOPATH)/bin"
            staticcheck ./... > ci-artifacts/${{ matrix.os }}/staticcheck.txt 2>&1 || true
          fi

      - name: Upload OS-specific CI artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ci-artifacts-${{ matrix.os }}
          path: ci-artifacts/${{ matrix.os }}
          retention-days: 90
          if-no-files-found: warn

  ai-refactor:
    name: AI Refactor & PR
    runs-on: ubuntu-latest
    needs: golangci
    outputs:
      pr_branch: ${{ steps.ai_run.outputs.pr_branch }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: stable
          cache: false

      - name: Download linux artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          name: ci-artifacts-ubuntu-latest
          path: ci-artifacts/ubuntu-latest
        continue-on-error: true

      - name: Download windows artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          name: ci-artifacts-windows-latest
          path: ci-artifacts/windows-latest
        continue-on-error: true

      - name: Consolidate artifacts
        run: |
          mkdir -p ci-artifacts/combined
          cp -r ci-artifacts/ubuntu-latest/* ci-artifacts/combined/ 2>/dev/null || true
          cp -r ci-artifacts/windows-latest/* ci-artifacts/combined/ 2>/dev/null || true
          ls -la ci-artifacts || true

      - name: Ensure AI script is executable
        run: chmod +x .github/scripts/ai_refactor.sh

      - name: Run AI refactor script
        id: ai_run
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GH2_TOKEN: ${{ secrets.GH2_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail || true
          ./.github/scripts/ai_refactor.sh --artifacts ci-artifacts/combined
        continue-on-error: true

      - name: Create pull request for AI changes
        if: ${{ always() && needs.ai-refactor.outputs.pr_branch != '' }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH2_TOKEN }}
          branch: ${{ needs.ai-refactor.outputs.pr_branch }}
          base: main
          title: "chore: automated dependency & code fixes (AI-assisted)"
          body: |
            Automated PR created by CI. The AI reviewed lint/build/test outputs and applied fixes to:
            - go.mod
            - go.sum
            - chachacrypt.go
            Please review changes and CI artifacts.
          labels: automated, dependencies, ai-assisted
          draft: false

      - name: Upload consolidated CI artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ci-artifacts
          path: ci-artifacts/combined/**
          retention-days: 90
          if-no-files-found: warn
