# File: .github/workflows/CI_qwen3.yml
name: CI_qwen3

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GOFLAGS: -mod=mod

jobs:
  golangci:
    strategy:
      matrix:
        go: [stable]
        os: [ubuntu-latest, windows-latest]
    name: lint
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ matrix.go }}
          cache: false

      - name: Install jq (Linux) / ensure jq (Windows)
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq || true
      - name: Ensure jq on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            choco install jq -y || Write-Output "choco jq install skipped"
          }

      - name: Run golangci/golangci-lint-action (install binary; non-fatal)
        uses: golangci/golangci-lint-action@v8.0.0
        continue-on-error: true
        with:
          version: v2.5.0
          install-mode: binary
          verify: true
          skip-cache: true
          skip-save-cache: true
          github-token: ${{ secrets.GH2_TOKEN }}
          only-new-issues: false
          problem-matchers: false
          cache-invalidation-interval: 7
          args: --timeout=20m --fix
        env:
          GOFLAGS: -mod=mod
          GOTOOLCHAIN: local

      - name: Prepare artifacts dir
        run: |
          mkdir -p ci-artifacts/${{ matrix.os }}

      - name: Ensure golangci-lint binary available (fallback)
        if: runner.os != 'Windows'
        run: |
          set -euo pipefail
          OUTDIR="ci-artifacts/${{ matrix.os }}"
          if ! command -v golangci-lint >/dev/null 2>&1; then
            VERSION="v2.5.0"
            TAR="golangci-lint-${VERSION#v}-linux-amd64.tar.gz"
            URL="https://github.com/golangci/golangci-lint/releases/download/${VERSION}/${TAR}"
            curl -fsSL "$URL" -o /tmp/golangci.tar.gz
            tar -xzf /tmp/golangci.tar.gz -C /tmp
            DIR=$(find /tmp -maxdepth 1 -type d -name "golangci-lint-*-linux-amd64" | head -n1)
            sudo mv "$DIR/golangci-lint" /usr/local/bin/golangci-lint || true
          fi
          golangci-lint --version > "$OUTDIR/golangci.version" 2>&1 || true

      - name: Ensure golangci-lint binary available (Windows fallback)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $outDir = "ci-artifacts/${{ matrix.os }}"
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          if (-not (Get-Command golangci-lint -ErrorAction SilentlyContinue)) {
            $version = 'v2.5.0'
            $zip = "golangci-lint-$($version.TrimStart('v'))-windows-amd64.zip"
            $url = "https://github.com/golangci/golangci-lint/releases/download/$version/$zip"
            $out = Join-Path $env:TEMP 'golangci.zip'
            Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing
            $expand = Join-Path $env:TEMP 'golangci'
            Expand-Archive -LiteralPath $out -DestinationPath $expand -Force
            $exe = Get-ChildItem -Path $expand -Recurse -Filter "golangci-lint.exe" | Select-Object -First 1
            $dest = "$env:ProgramFiles\golangci-lint"
            New-Item -ItemType Directory -Path $dest -Force | Out-Null
            Copy-Item -Path $exe.FullName -Destination $dest -Force
            $env:Path += ";$dest"
          }
          & golangci-lint --version > "$outDir/golangci.version" 2>&1 || Write-Output "version check failed"

      - name: Run golangci-lint (full checks, JSON + stdout/stderr) - Linux/Mac
        if: runner.os != 'Windows'
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          OUTDIR="ci-artifacts/${{ matrix.os }}"
          mkdir -p "$OUTDIR"
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --timeout=20m --fix --out-format json ./... > "$OUTDIR/golangci.json" 2> "$OUTDIR/golangci.stderr" || true
            golangci-lint run --timeout=20m --fix ./... > "$OUTDIR/golangci.stdout" 2>> "$OUTDIR/golangci.stderr" || true
            golangci-lint --version > "$OUTDIR/golangci.version" 2>&1 || true
          else
            echo "golangci-lint missing" > "$OUTDIR/golangci.stderr"
          fi

      - name: Run golangci-lint (full checks, JSON + stdout/stderr) - Windows
        if: runner.os == 'Windows'
        continue-on-error: true
        shell: pwsh
        run: |
          Set-Location -Path $Env:GITHUB_WORKSPACE
          $outDir = "ci-artifacts/${{ matrix.os }}"
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $exe = Get-Command golangci-lint -ErrorAction SilentlyContinue
          if ($null -ne $exe) {
            & golangci-lint run --timeout=20m --fix --out-format json ./... > "$outDir/golangci.json" 2> "$outDir/golangci.stderr"  || Write-Output "lint returned non-zero"
            & golangci-lint run --timeout=20m --fix ./... > "$outDir/golangci.stdout" 2>> "$outDir/golangci.stderr"  || Write-Output "lint returned non-zero"
            & golangci-lint --version > "$outDir/golangci.version" 2>&1 || Write-Output "version check failed"
          } else {
            "golangci-lint missing" | Out-File "$outDir/golangci.stderr" -Encoding utf8
          }

      - name: Auto-fix safe issues (gofmt + golangci-lint --fix + go mod tidy) - non-fatal
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          OUTDIR="ci-artifacts/${{ matrix.os }}"
          mkdir -p "$OUTDIR"
          if command -v gofmt >/dev/null 2>&1; then
            gofmt -w .
          fi
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --fix --timeout=10m ./... >> "$OUTDIR/auto-fix.log" 2>&1 || true
          fi
          go mod tidy >> "$OUTDIR/auto-fix.log" 2>&1 || true
          git status --porcelain > "$OUTDIR/git_status_after_autofix.txt" 2>&1 || true

      - name: Capture build & test logs (non-fatal)
        continue-on-error: true
        run: |
          set -euo pipefail || true
          cd "${GITHUB_WORKSPACE:-$PWD}"
          OUTDIR="ci-artifacts/${{ matrix.os }}"
          mkdir -p "$OUTDIR"
          echo "=== go version ===" > "$OUTDIR/ai-build.log" 2>&1
          go version >> "$OUTDIR/ai-build.log" 2>&1 || true
          echo "=== go build ===" >> "$OUTDIR/ai-build.log" 2>&1
          go build ./... >> "$OUTDIR/ai-build.log" 2>&1 || true
          echo "=== go test ===" >> "$OUTDIR/ai-build.log" 2>&1
          go test ./... >> "$OUTDIR/ai-build.log" 2>&1 || true

      - name: Save workspace state and diffs
        if: always()
        run: |
          OUTDIR="ci-artifacts/${{ matrix.os }}"
          mkdir -p "$OUTDIR"
          git --no-pager rev-parse --abbrev-ref HEAD > "$OUTDIR/git_branch.txt" 2>/dev/null || true
          git --no-pager status --porcelain > "$OUTDIR/git_status.txt" 2>/dev/null || true
          git --no-pager diff -- . > "$OUTDIR/git_diff.patch" 2>/dev/null || true
          ls -la > "$OUTDIR/ls.txt" 2>&1 || true

      - name: Upload OS-specific CI artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ci-artifacts-${{ matrix.os }}
          path: ci-artifacts/${{ matrix.os }}
          retention-days: 7
          if-no-files-found: warn

  ai-refactor:
    name: AI Refactor & PR
    runs-on: ubuntu-latest
    needs: golangci
    outputs:
      pr_branch: ${{ steps.ai_run.outputs.pr_branch }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Go (for validation)
        uses: actions/setup-go@v6.0.0
        with:
          go-version: stable
          cache: false

      - name: Download linux artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          name: ci-artifacts-ubuntu-latest
          path: ci-artifacts/ubuntu-latest
        continue-on-error: true

      - name: Download windows artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          name: ci-artifacts-windows-latest
          path: ci-artifacts/windows-latest
        continue-on-error: true

      - name: Consolidate artifacts
        run: |
          mkdir -p ci-artifacts/combined
          cp -r ci-artifacts/ubuntu-latest/* ci-artifacts/combined/ 2>/dev/null || true
          cp -r ci-artifacts/windows-latest/* ci-artifacts/combined/ 2>/dev/null || true
          ls -la ci-artifacts || true

      - name: Ensure AI script is executable
        run: chmod +x .github/scripts/ai_refactor.sh

      - name: Run AI refactor script
        id: ai_run
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GH2_TOKEN: ${{ secrets.GH2_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -euo pipefail || true
          ./.github/scripts/ai_refactor.sh --artifacts ci-artifacts/combined
        continue-on-error: true

      - name: Create pull request for AI changes
        if: ${{ always() && steps.ai_run.outputs.pr_branch != '' }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH2_TOKEN }}
          branch: ${{ steps.ai_run.outputs.pr_branch }}
          base: main
          title: "chore: automated dependency & code fixes (AI-assisted)"
          body: |
            Automated PR created by CI. The AI reviewed lint/build/test outputs and applied fixes to:
            - go.mod
            - go.sum
            - chachacrypt.go
            Please review changes and CI artifacts.
          labels: automated, dependencies, ai-assisted
          draft: false

      - name: Upload consolidated CI artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ci-artifacts
          path: ci-artifacts/combined/**
          retention-days: 7
          if-no-files-found: warn
