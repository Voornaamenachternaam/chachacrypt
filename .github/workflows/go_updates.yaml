name: Go Dependency & Compatibility Updates

on:
  schedule:
    - cron: '0 4 * * *'    # daily at 04:00 UTC
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write
  contents: write

jobs:
  discover-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find all Go modules and emit JSON
        id: set-modules
        run: |
          module_paths=$(find . -name "go.mod" -exec dirname {} \; | sed 's#^\./##')
          json=$(printf '%s\n' $module_paths \
                 | sed 's/.*/"&"/' \
                 | paste -sd, -)
          json="[$json]"
          echo "Discovered modules: $json"
          echo "::set-output name=modules::$json"

  update-and-fix:
    needs: discover-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.modules) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine latest Go version
        id: go-version
        run: |
          latest=$(curl -s https://go.dev/VERSION?m=text)
          echo "GO_VERSION=$latest" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/**/go.sum
            ${{ github.workspace }}/**/go.mod
            ${{ github.workspace }}/**/pkg/mod
          key: go-mod-${{ matrix.module }}-${{ hashFiles(format('{0}/go.sum', matrix.module)) }}
          restore-keys: |
            go-mod-${{ matrix.module }}-

      - name: Change to module directory
        run: cd ${{ matrix.module }}

      - name: Update dependencies
        run: |
          cd ${{ matrix.module }}
          go get -u ./...
          go mod tidy

      - name: Run AI compatibility fixes
        if: ${{ secrets.OPENAI_API_KEY != '' }}
        uses: dlidstrom/genai-code-review@v3.0.8
        with:
          entryPoint: compatibility
          args: --fix
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check for local changes
        id: detect-changes
        run: |
          cd ${{ matrix.module }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "changes=true" >> $GITHUB_ENV
            git add .
            git commit -m "chore: update deps & AI fixes for ${{ matrix.module }}"
          fi

      - name: Sync branch with main
        if: ${{ env.changes == 'true' }}
        run: |
          git fetch origin main
          branch="update/${{ matrix.module }}/$(date +'%Y%m%d')"
          git checkout -b "$branch"
          git rebase origin/main || git rebase --abort

      - name: Create Pull Request
        if: ${{ env.changes == 'true' }}
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update/${{ matrix.module }}/$(date +'%Y%m%d')
          commit-message: "chore: update ${{ matrix.module }} deps & AI fixes"
          title: "Update ${{ matrix.module }} dependencies & AI fixes"
          body: |
            Automated updates for module `${{ matrix.module }}` including dependency bumps and AI-powered compatibility fixes.
          labels: automated
          base: main

      - name: Build PR summary
        if: ${{ env.changes == 'true' }}
        run: |
          cd ${{ matrix.module }}
          echo "## Automated Go Updates & AI Fixes" > pr-summary.md
          echo "" >> pr-summary.md
          echo "**Module:** `${{ matrix.module }}`" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "**Dependency changes:**" >> pr-summary.md
          git --no-pager diff --name-status HEAD~1 HEAD >> pr-summary.md || echo "– no diffs –"
        shell: bash

      - name: Post PR summary comment
        if: ${{ env.changes == 'true' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          body: |
            $(cat pr-summary.md)
