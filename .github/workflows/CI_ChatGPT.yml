name: CI_ChatGPT

on:
  workflow_dispatch:
  schedule:
    - cron: '0 06 * * *'

permissions:
  contents: write
  pull-requests: write

env:
  # default AI model; can be overridden with a secret named AI_MODEL if desired
  AI_MODEL: qwen/qwen3-coder:free
  # default branch of the repo - adjust if your main branch is 'main'/'master' etc.
  DEFAULT_BRANCH: main

jobs:
  detect-go:
    name: Detect latest stable Go versions
    runs-on: ubuntu-latest
    outputs:
      go-versions: ${{ steps.set-versions.outputs.go-versions }}
    steps:
      - name: Checkout (needed for some actions)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine top stable Go versions and emit matrix
        id: set-versions
        run: |
          # Query go.dev for stable versions, de-duplicate, pick top 3 stable releases
          VERSIONS_RAW=$(curl -sS https://go.dev/dl/?mode=json | jq -r '.[] | select(.stable==true) | .version' | sed 's/^go//' | awk '!seen[$0]++' | head -n 3)
          if [ -z "${VERSIONS_RAW}" ]; then
            echo "No stable Go versions detected; falling back to 'stable'"
            VERSIONS_JSON='["stable"]'
          else
            # Convert newline-separated to JSON array
            VERSIONS_JSON=$(printf '%s\n' ${VERSIONS_RAW} | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "Detected Go versions: ${VERSIONS_JSON}"
          echo "go-versions=${VERSIONS_JSON}" >> "$GITHUB_OUTPUT"

  update-go:
    name: Update, lint, scan, AI-fix (matrix)
    needs: detect-go
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJson(needs.detect-go.outputs.go-versions) }}

    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      # allow override via secrets.AI_MODEL; if not set fallback to env.AI_MODEL above
      AI_MODEL: ${{ secrets.AI_MODEL || env.AI_MODEL }}
      DEFAULT_BRANCH: ${{ env.DEFAULT_BRANCH }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/gopath/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-${{ matrix.go-version }}-

      - name: Install required tools (gofumpt, goimports, gosec)
        run: |
          set -euo pipefail
          # install gofumpt and goimports
          GOPATH_BIN=$(go env GOPATH)/bin
          mkdir -p "$GOPATH_BIN"
          # Use versioned installs only if you want pinned versions, otherwise latest
          go install mvdan.cc/gofumpt@latest
          go install golang.org/x/tools/cmd/goimports@latest
          # gosec v2
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          echo "Installed tools to $GOPATH_BIN"
          echo "$GOPATH_BIN" >> $GITHUB_PATH

      - name: Run gofmt/gofumpt and goimports (format & fix)
        run: |
          set -euo pipefail
          # format in-place
          git_root=$(git rev-parse --show-toplevel)
          find . -name '*.go' -not -path "./vendor/*" -print0 | xargs -0 -n1 sh -c 'gofumpt -w "$0" || true' 
          # apply goimports
          find . -name '*.go' -not -path "./vendor/*" -print0 | xargs -0 -n1 sh -c 'goimports -w "$0" || true'
          # record formatting diff
          git --no-pager diff --no-color > repair.diff || true

      - name: Run golangci-lint (auto-fix where safe)
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          # optional: set to a stable golangci-lint version via "version" input if desired
          # version: v2.4.0
          args: --timeout 5m --fix
        # note: the action prints annotations and returns non-zero on errors unless configured

      - name: Run go vet and tests (pre-AI)
        run: |
          set -euo pipefail
          go mod tidy
          go vet ./... || true
          go test ./... -count=1

      - name: Run gosec security scan
        run: |
          set -euo pipefail
          gosec -fmt=json -out gosec.json ./... || true

      - name: Upload pre-AI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pre-ai-artifacts-${{ matrix.go-version }}
          path: |
            repair.diff
            gosec.json

      - name: Build AI payload (patch-based) and call OpenRouter with retries
        id: ai-call
        env:
          OPENROUTER_API_KEY: ${{ env.OPENROUTER_API_KEY }}
          AI_MODEL: ${{ env.AI_MODEL }}
        run: |
          set -euo pipefail
          # Build system+user prompts. Keep system prompt short and explicit.
          SYSTEM_PROMPT="You are an expert Go developer. Given existing repository diffs and failing test output, produce a unified patch (git diff/patch format) that fixes the issues and preserves semantics and licensing. Output only the patch, starting with 'diff --git'. If no changes are needed reply with 'NO_CHANGE'."

          # Read the repair diff (formatting auto-fixes) and a short failing-tests excerpt (if any)
          REPAIR_DIFF=$( [ -f repair.diff ] && sed -n '1,2000p' repair.diff | sed 's/\"/\\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g' || echo "" )

          # Build JSON payload using jq to ensure correct escaping
          PAYLOAD=$(jq -n --arg model "$AI_MODEL" \
            --arg system "$SYSTEM_PROMPT" \
            --arg repair "$REPAIR_DIFF" \
            '{
              model: $model,
              messages: [
                {role:"system", content:$system},
                {role:"user", content: ("Repair diff (may be empty):\n" + $repair + "\n\nInstruction: Return a valid unified patch (diff --git ...).")}
              ]
            }')

          # Function to call OpenRouter with simple retry/backoff
          MAX_ATTEMPTS=3
          attempt=0
          RESPONSE_FILE=response_ai.json
          while [ $attempt -lt $MAX_ATTEMPTS ]; do
            attempt=$((attempt+1))
            echo "AI request attempt $attempt/$MAX_ATTEMPTS..."
            http_code=$(curl -sS -w '%{http_code}' -o "$RESPONSE_FILE" \
              -X POST "https://openrouter.ai/api/v1/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${OPENROUTER_API_KEY}" \
              -d "$PAYLOAD" || true)

            if [ "$http_code" = "200" ] || [ "$http_code" = "201" ]; then
              echo "AI call successful (HTTP $http_code)"
              break
            fi

            echo "AI call HTTP $http_code (attempt $attempt)."
            if [ $attempt -lt $MAX_ATTEMPTS ]; then
              sleep $((attempt * 3))
            else
              echo "AI service failed after ${MAX_ATTEMPTS} attempts. Dumping response (if any):"
              [ -f "$RESPONSE_FILE" ] && cat "$RESPONSE_FILE"
              exit 1
            fi
          done

          # Extract AI message content (support variants similar to OpenAI-like responses)
          if jq -e '.choices[0].message.content' "$RESPONSE_FILE" >/dev/null 2>&1; then
            jq -r '.choices[0].message.content' "$RESPONSE_FILE" > ai-response.txt
          elif jq -e '.result[0].content[0].text' "$RESPONSE_FILE" >/dev/null 2>&1; then
            jq -r '.result[0].content[0].text' "$RESPONSE_FILE" > ai-response.txt
          else
            echo "Could not extract AI response content; raw response:"
            cat "$RESPONSE_FILE"
            exit 1
          fi

          # Extract patch starting with "diff --git"
          sed -n '/^diff --git /,$p' ai-response.txt > ai.patch || true
          if [ ! -s ai.patch ]; then
            echo "AI did not return a patch. Saving ai-response.txt for inspection."
            cat ai-response.txt
            echo "NO_PATCH" > ai.patch
          fi

          echo "::set-output name=ai-patch::$( [ -s ai.patch ] && echo true || echo false )"
        # Note: set-output is deprecated in older syntax but using ::set-output in script is permitted in run steps.
        # We're also using step output via id:ai-call which we check below.

      - name: Validate AI patch and apply (safe path)
        if: steps.ai-call.outputs.ai-patch == 'true'
        run: |
          set -euo pipefail
          # Ensure ai.patch is present
          if [ ! -f ai.patch ] || [ ! -s ai.patch ]; then
            echo "ai.patch missing or empty; nothing to apply."
            exit 0
          fi

          # Validate patch
          if git apply --check ai.patch; then
            echo "ai.patch validated by git apply --check. Applying patch."
            git apply ai.patch
            git add -A
            git commit -m "chore(ai): apply AI suggested patch" || true
          else
            echo "ai.patch failed git apply --check. Saving ai-response.txt for review."
            echo "===== AI RESPONSE ====="
            sed -n '1,200p' ai-response.txt || true
            # Fail the job to attract human review (optional: set to continue)
            exit 1
          fi

      - name: Re-run tests and vet after AI patch (if applied)
        run: |
          set -euo pipefail
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes present; running go vet and tests"
            go vet ./... || true
            go test ./... -count=1
          else
            echo "No code changes; skipping re-test step."
          fi

      - name: Record AI & post-run artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-and-ci-artifacts-${{ matrix.go-version }}
          path: |
            ai-response.txt
            ai.patch
            repair.diff
            gosec.json

      - name: Check for staged/committed changes and create a PR
        id: git-check
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # If there are changes on the workspace (committed by previous step), create a branch
          if [ -n "$(git status --porcelain)" ]; then
            BRANCH="automated/ai-fix-${{ matrix.go-version }}-$(date +%s)"
            git push -u origin HEAD:"${BRANCH}"
            echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for dependency updates / AI fixes
        if: steps.git-check.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.7
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: ${{ steps.git-check.outputs.branch }}
          title: "chore(ai): Apply AI-suggested fixes (Go ${ { matrix.go-version } })"
          commit-message: "chore(ai): automated AI-suggested fixes for Go ${ { matrix.go-version } }"
          body: |
            This automated PR contains AI-suggested fixes produced by the OpenRouter model `${{ env.AI_MODEL }}`.
            Please review the changes, run tests, and merge if acceptable.

