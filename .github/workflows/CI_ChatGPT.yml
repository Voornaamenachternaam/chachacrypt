name: CI_ChatGPT

on:
  workflow_dispatch:
  schedule:
    - cron: '0 06 * * *'

permissions:
  contents: write
  pull-requests: write

env:
  DEFAULT_AI_MODEL: tngtech/deepseek-r1t2-chimera:free
  DEFAULT_BRANCH: main

jobs:
  detect-go:
    name: Detect Go versions
    runs-on: ubuntu-latest
    outputs:
      go-versions: ${{ steps.set-versions.outputs.go-versions }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - run: sudo apt-get update && sudo apt-get install -y jq
      - id: set-versions
        run: |
          set -euo pipefail
          VERSIONS_RAW=$(curl -sS https://go.dev/dl/?mode=json | jq -r '.[] | select(.stable==true) | .version' | sed 's/^go//' | awk '!seen[$0]++' | head -n 3)
          if [ -z "$VERSIONS_RAW" ]; then
            VERSIONS_JSON='["stable"]'
          else
            VERSIONS_JSON=$(printf '%s\n' ${VERSIONS_RAW} | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "go-versions=${VERSIONS_JSON}" >> "$GITHUB_OUTPUT"

  update-go:
    name: Update, lint, auto-fix, AI-fallback
    needs: detect-go
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJson(needs.detect-go.outputs.go-versions) }}
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure job variables
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.AI_MODEL }}" ]; then
            echo "AI_MODEL=${{ secrets.AI_MODEL }}" >> "$GITHUB_ENV"
          else
            echo "AI_MODEL=${{ env.DEFAULT_AI_MODEL }}" >> "$GITHUB_ENV"
          fi
          if [ -n "${{ secrets.DEFAULT_BRANCH }}" ]; then
            echo "DEFAULT_BRANCH=${{ secrets.DEFAULT_BRANCH }}" >> "$GITHUB_ENV"
          else
            echo "DEFAULT_BRANCH=${{ env.DEFAULT_BRANCH }}" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/gopath/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-${{ matrix.go-version }}-

      - name: Install tooling
        run: |
          set -euo pipefail
          go install mvdan.cc/gofumpt@latest
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          sudo apt-get update && sudo apt-get install -y jq

      - name: Format (gofumpt + goimports)
        run: |
          set -euo pipefail
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 gofumpt -w
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 goimports -w
          git --no-pager diff --no-color > repair.diff || true

      # ---- Deterministic lint auto-fix BEFORE any annotating lint run ----
      - name: Deterministic errcheck auto-fix
        run: |
          set -euo pipefail
          chmod +x ./.github/scripts/auto_fix_lints.sh
          ./.github/scripts/auto_fix_lints.sh || true

      - name: "Pre-flight: vet, tests, gosec"
        run: |
          set -euo pipefail
          go mod tidy
          go vet ./... || true
          go test ./... -count=1
          gosec -fmt=json -out gosec.json ./... || true

      - name: Collect remaining lint issues (JSON, no annotations)
        id: collect-lint
        run: |
          set -euo pipefail
          # Use golangci-lint binary directly to avoid publishing annotations at this stage.
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --out-format json ./... > golangci-output.json || true
          else
            TMPDIR=$(mktemp -d)
            curl -sL -o "$TMPDIR/golangci.tgz" "https://github.com/golangci/golangci-lint/releases/download/v2.4.0/golangci-lint-2.4.0-linux-amd64.tar.gz"
            tar -xzf "$TMPDIR/golangci.tgz" -C "$TMPDIR"
            "$TMPDIR/golangci-lint" run --out-format json ./... > golangci-output.json || true
          fi
          REMAINING=$(jq -r '.Issues | length' golangci-output.json 2>/dev/null || echo 0)
          echo "remaining_issues_count=$REMAINING" >> "$GITHUB_OUTPUT"

      - name: AI fallback for remaining issues
        if: ${{ steps.collect-lint.outputs.remaining_issues_count != '0' }}
        id: ai-call
        run: |
          set -euo pipefail
          chmod +x ./.github/scripts/ai_refactor.sh
          ./.github/scripts/ai_refactor.sh patch https://openrouter.ai/api/v1/chat/completions || true
          if [ -s ai.patch ]; then
            echo "ai_patch_present=true" >> "$GITHUB_OUTPUT"
          else
            echo "ai_patch_present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate & apply AI patch
        if: ${{ steps.ai-call.outputs.ai_patch_present == 'true' }}
        run: |
          set -euo pipefail
          git apply --check ai.patch
          git apply ai.patch
          git add -A
          git commit -m "chore(ai): apply AI patch" || true

      - name: "Post-fix: vet, tests"
        run: |
          set -euo pipefail
          go mod tidy
          go vet ./... || true
          go test ./... -count=1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-${{ matrix.go-version }}
          path: |
            repair.diff
            ai-response.txt
            ai.patch
            golangci-output.json
            gosec.json

      # ---- Single annotating lint run after all fixes applied ----
      - name: Lint (final, annotating)
        id: golangci-final
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          args: --timeout 5m

      - name: Create branch & push if changes
        id: create_branch
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            BRANCH="automated/ai-fixes-${{ matrix.go-version }}-$(date +%s)"
            git checkout -b "$BRANCH"
            git add -A
            git commit -m "chore(ci): automated fixes + AI-assist" || true
            git push --set-upstream origin "$BRANCH"
            echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
            echo "changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "changes=false" >> "$GITHUB_OUTPUT"
          fi

      - if: ${{ steps.create_branch.outputs.changes == 'true' }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: ${{ steps.create_branch.outputs.branch }}
          base: ${{ env.DEFAULT_BRANCH }}
          title: "chore(ci): automated lint fixes and AI suggestions (Go ${{ matrix.go-version }})"
          body: |
            This PR contains deterministic lint fixes and AI-suggested patches where needed.
