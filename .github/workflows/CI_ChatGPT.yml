name: CI_ChatGPT

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  DEFAULT_AI_MODEL: tngtech/deepseek-r1t2-chimera:free
  DEFAULT_BRANCH: main

jobs:
  lint-fix-and-ai:
    name: Lint, deterministic-fix, AI-fallback, PR
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        go-version: [ "1.25.1" ]

    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure AI model and default branch
        run: |
          if [ -n "${{ secrets.AI_MODEL }}" ]; then
            echo "AI_MODEL=${{ secrets.AI_MODEL }}" >> $GITHUB_ENV
          else
            echo "AI_MODEL=${{ env.DEFAULT_AI_MODEL }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.DEFAULT_BRANCH }}" ]; then
            echo "DEFAULT_BRANCH=${{ secrets.DEFAULT_BRANCH }}" >> $GITHUB_ENV
          else
            echo "DEFAULT_BRANCH=${{ env.DEFAULT_BRANCH }}" >> $GITHUB_ENV
          fi

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/gopath/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-${{ matrix.go-version }}-

      - name: Ensure formatter/import tools
        run: |
          set -euo pipefail
          go install mvdan.cc/gofumpt@latest
          go install golang.org/x/tools/cmd/goimports@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          sudo apt-get update && sudo apt-get install -y jq

      - name: Initial format and imports
        run: |
          set -euo pipefail
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 gofumpt -w || true
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 goimports -w || true
          git --no-pager diff --no-color > repair.diff || true

      - name: Run deterministic Close() fixer
        run: |
          set -euo pipefail
          go run ./internal/fix/closecheck.go . || true

      - name: Re-run goimports after fixer
        run: |
          set -euo pipefail
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 goimports -w || true
          git --no-pager diff --no-color > repair.diff || true

      - name: "Pre-check: vet & tests & gosec"
        run: |
          set -euo pipefail
          go mod tidy
          go vet ./... || true
          go test ./... -count=1 || true
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt=json -out gosec.json ./... || true

      - name: Run golangci-lint (collect JSON, do not post annotations yet)
        run: |
          set -euo pipefail
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --out-format json ./... > golangci-output.json || true
          else
            TMPDIR=$(mktemp -d)
            curl -sL -o "$TMPDIR/golangci.tgz" "https://github.com/golangci/golangci-lint/releases/download/v2.4.0/golangci-lint-2.4.0-linux-amd64.tar.gz"
            tar -xzf "$TMPDIR/golangci.tgz" -C "$TMPDIR"
            "$TMPDIR/golangci-lint" run --out-format json ./... > golangci-output.json || true
          fi
          REMAINING=$(jq -r '.Issues | length' golangci-output.json 2>/dev/null || echo 0)
          echo "remaining_issues_count=$REMAINING" >> $GITHUB_OUTPUT

      - name: AI fallback (shell script) when issues remain
        if: ${{ steps.run.outputs.remaining_issues_count != '0' || steps.run.outputs.remaining_issues_count == '' }}
        run: |
          set -euo pipefail
          chmod +x ./.github/scripts/ai_refactor.sh
          ./.github/scripts/ai_refactor.sh patch https://openrouter.ai/api/v1/chat/completions || true
          if [ -s ai.patch ]; then
            echo "ai_patch_present=true" >> $GITHUB_OUTPUT
          else
            echo "ai_patch_present=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate & apply AI patch
        if: ${{ steps.run.outputs.ai_patch_present == 'true' || steps.run.outputs.ai_patch_present == 'true' }}
        run: |
          set -euo pipefail
          if [ -s ai.patch ] && git apply --check ai.patch; then
            git apply ai.patch
            git add -A
            git commit -m "chore(ai): apply AI suggested patch" || true
          fi

      - name: "Final: format, imports, vet, test"
        run: |
          set -euo pipefail
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 gofumpt -w || true
          find . -name '*.go' -not -path './vendor/*' -print0 | xargs -0 goimports -w || true
          go mod tidy
          go vet ./... || true
          go test ./... -count=1

      - name: Final lint run with annotations
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          args: --timeout 5m

      - name: Push fixes and create PR (if changes)
        run: |
          set -euo pipefail
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            BRANCH="automated/ai-fixes-${{ matrix.go-version }}-$(date +%s)"
            git checkout -b "$BRANCH"
            git add -A
            git commit -m "chore(ci): deterministic fixes + AI" || true
            git push --set-upstream origin "$BRANCH"
            gh_pr_branch="$BRANCH"
            echo "pr_branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: ${{ steps.push.outputs.changes == 'true' || steps.push.outputs.changes == 'true' }}
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: ${{ steps.push.outputs.pr_branch }}
          base: ${{ env.DEFAULT_BRANCH }}
          title: "chore(ci): automated lint fixes and AI suggestions (Go ${{ matrix.go-version }})"
          body: |
            This PR contains deterministic lint fixes and AI-suggested patches where needed.
