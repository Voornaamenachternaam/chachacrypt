
diff --git a/chachacrypt.go b/chachacrypt.go
index 8322f73..3a30cca 100644
--- a/chachacrypt.go
+++ b/chachacrypt.go
@@ -206,13 +206,21 @@ func encryptFile(inputFile, outputFile, password string) error {
 	if err != nil {
 		return fmt.Errorf("error opening input file: %w", err)
 	}
-	defer inFile.Close()
+	defer func() {
+		if err := inFile.Close(); err != nil {
+			fmt.Fprintf(os.Stderr, "warning: failed to close resource: %v\n", err)
+		}
+	}()
 
 	outFile, err := os.Create(outputFile)
 	if err != nil {
 		return fmt.Errorf("error creating output file: %w", err)
 	}
-	defer outFile.Close()
+	defer func() {
+		if err := outFile.Close(); err != nil {
+			fmt.Fprintf(os.Stderr, "warning: failed to close resource: %v\n", err)
+		}
+	}()
 
 	if _, err := outFile.Write(salt); err != nil {
 		return fmt.Errorf("error writing salt: %w", err)
@@ -274,13 +282,21 @@ func decryptFile(inputFile, outputFile, password string) error {
 	if err != nil {
 		return fmt.Errorf("error opening input file: %w", err)
 	}
-	defer inFile.Close()
+	defer func() {
+		if err := inFile.Close(); err != nil {
+			fmt.Fprintf(os.Stderr, "warning: failed to close resource: %v\n", err)
+		}
+	}()
 
 	outFile, err := os.Create(outputFile)
 	if err != nil {
 		return fmt.Errorf("error creating output file: %w", err)
 	}
-	defer outFile.Close()
+	defer func() {
+		if err := outFile.Close(); err != nil {
+			fmt.Fprintf(os.Stderr, "warning: failed to close resource: %v\n", err)
+		}
+	}()
 
 	salt := make([]byte, config.SaltSize)
 	if _, err := io.ReadFull(inFile, salt); err != nil {
diff --git a/internal/fix/closecheck.go b/internal/fix/closecheck.go
index ad77144..eca669b 100644
--- a/internal/fix/closecheck.go
+++ b/internal/fix/closecheck.go
@@ -89,11 +89,11 @@ func main() {
 		if changed {
 			newSrc := strings.Join(lines, "\n")
 			if formatted, ferr := format.Source([]byte(newSrc)); ferr == nil {
-				if werr := os.WriteFile(path, formatted, 0644); werr != nil {
+				if werr := os.WriteFile(path, formatted, 0o644); werr != nil {
 					fmt.Fprintf(os.Stderr, "write error for %s: %v\n", path, werr)
 				}
 			} else {
-				if werr := os.WriteFile(path, []byte(newSrc), 0644); werr != nil {
+				if werr := os.WriteFile(path, []byte(newSrc), 0o644); werr != nil {
 					fmt.Fprintf(os.Stderr, "write error for %s: %v\n", path, werr)
 				}
 			}
@@ -101,7 +101,6 @@ func main() {
 
 		return nil
 	})
-
 	if err != nil {
 		fmt.Fprintf(os.Stderr, "WalkDir failed: %v\n", err)
 		os.Exit(1)
