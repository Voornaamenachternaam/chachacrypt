diff --git a/chachacrypt.go b/chachacrypt.go
--- a/chachacrypt.go
+++ b/chachacrypt.go
@@ -5,6 +5,8 @@
 	"io"
 	"os"
 	"os/signal"
+	"path/filepath"
+	"math"
 
 	"golang.org/x/crypto/chacha20poly1305"
 	"golang.org/x/crypto/scrypt"
@@ -48,6 +50,12 @@
 		return nil, fmt.Errorf("invalid number of threads: %d", threads)
 	}
 
+	// Validate threads parameter for uint8 conversion
+	if threads < 0 || threads > math.MaxUint8 {
+		return nil, fmt.Errorf("threads value %d out of range (0-255)", threads)
+	}
+
 	config := &scryptConfig{
 		KeyMemory:  defaultKeyMemory,
-		KeyThreads: uint8(threads),
+		KeyThreads: uint8(threads), // Now safe after validation
 		ChunkSize:  defaultChunkSize,
 	}
@@ -202,7 +210,7 @@
 		return err
 	}
 
-	inFile, err := os.Open(inputFile)
+	inFile, err := os.Open(filepath.Clean(inputFile))
 	if err != nil {
 		return err
 	}
@@ -208,7 +216,7 @@
 		return err
 	}
 
-	outFile, err := os.Create(outputFile)
+	outFile, err := os.Create(filepath.Clean(outputFile))
 	if err != nil {
 		inFile.Close()
 		return err
@@ -270,7 +278,7 @@
 		return err
 	}
 
-	inFile, err := os.Open(inputFile)
+	inFile, err := os.Open(filepath.Clean(inputFile))
 	if err != nil {
 		return err
 	}
@@ -276,7 +284,7 @@
 		return err
 	}
 
-	outFile, err := os.Create(outputFile)
+	outFile, err := os.Create(filepath.Clean(outputFile))
 	if err != nil {
 		inFile.Close()
 		return err
@@ -333,5 +341,9 @@
 		return 0, err
 	}
 
+	if n < 0 || n > math.MaxUint32 {
+		return 0, fmt.Errorf("calculated size %d exceeds uint32 maximum", n)
+	}
+
 	return uint32(n), nil
 }
```

