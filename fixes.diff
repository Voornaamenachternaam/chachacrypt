diff --git a/chachacrypt.go b/chachacrypt.go
--- a/chachacrypt.go
+++ b/chachacrypt.go
@@ -7,6 +7,7 @@
 	"fmt"
 	"io"
 	"os"
+	"path/filepath"
 	"runtime"
 	"strconv"
 
@@ -43,6 +44,9 @@
 	if threads < 1 {
 		threads = 1
 	}
+	if threads > 255 {
+		return nil, fmt.Errorf("threads must be between 1-255")
+	}
 	return &ScryptParams{
 		Salt:       salt,
 		N:          defaultScryptN,
@@ -202,7 +206,8 @@
 }
 
 func encryptFile(inputFile, outputFile string, params *ScryptParams) error {
-	inFile, err := os.Open(inputFile)
+	cleanInput := filepath.Clean(inputFile)
+	inFile, err := os.Open(cleanInput)
 	if err != nil {
 		return err
 	}
@@ -211,7 +216,8 @@
 	}
 	defer inFile.Close()
 
-	outFile, err := os.Create(outputFile)
+	cleanOutput := filepath.Clean(outputFile)
+	outFile, err := os.Create(cleanOutput)
 	if err != nil {
 		return err
 	}
@@ -273,7 +279,8 @@
 }
 
 func decryptFile(inputFile, outputFile string, params *ScryptParams) error {
-	inFile, err := os.Open(inputFile)
+	cleanInput := filepath.Clean(inputFile)
+	inFile, err := os.Open(cleanInput)
 	if err != nil {
 		return err
 	}
@@ -282,7 +289,8 @@
 	}
 	defer inFile.Close()
 
-	outFile, err := os.Create(outputFile)
+	cleanOutput := filepath.Clean(outputFile)
+	outFile, err := os.Create(cleanOutput)
 	if err != nil {
 		return err
 	}
@@ -333,6 +341,10 @@
 }
 
 func readUint32(r io.Reader) (uint32, error) {
+	n, err := binary.ReadVarint(r)
+	if n < 0 || n > math.MaxUint32 {
+		return 0, fmt.Errorf("value %d out of uint32 range", n)
+	}
 	var b [4]byte
 	_, err := io.ReadFull(r, b[:])
 	if err != nil {
```
