To address the security issues and build warnings, here's the unified diff:

```diff
diff --git a/chachacrypt.go b/chachacrypt.go
--- a/chachacrypt.go
+++ b/chachacrypt.go
@@ -5,6 +5,7 @@
 	"encoding/hex"
 	"fmt"
 	"os"
+	"path/filepath"
 
 	"golang.org/x/crypto/argon2"
 	"golang.org/x/crypto/chacha20poly1305"
@@ -21,7 +22,7 @@
 type Key struct {
 	KeySalt    []byte
 	KeyMemory  uint32
-	KeyThreads uint8
+	KeyThreads uint32
 	ChunkSize  int
 }
 
@@ -48,7 +49,7 @@
 	return &Key{
 		KeySalt:    salt,
 		KeyMemory:  defaultKeyMemory,
-		KeyThreads: uint8(threads),
+		KeyThreads: uint32(threads),
 		ChunkSize:  defaultChunkSize,
 	}, nil
 }
@@ -202,10 +203,12 @@
 }
 
 func encryptFile(inputFile, outputFile string, key *Key) error {
+	cleanInput := filepath.Clean(inputFile)
+	cleanOutput := filepath.Clean(outputFile)
 
-	inFile, err := os.Open(inputFile)
+	inFile, err := os.Open(cleanInput)
 	if err != nil {
-		return fmt.Errorf("error opening input file: %v", err)
+		return fmt.Errorf("error opening input file: %w", err)
 	}
 	defer inFile.Close()
 
@@ -213,7 +216,7 @@
 		return fmt.Errorf("error getting input file info: %v", err)
 	}
 
-	outFile, err := os.Create(outputFile)
+	outFile, err := os.Create(cleanOutput)
 	if err != nil {
 		return fmt.Errorf("error creating output file: %v", err)
 	}
@@ -270,10 +273,12 @@
 }
 
 func decryptFile(inputFile, outputFile string, key *Key) error {
+	cleanInput := filepath.Clean(inputFile)
+	cleanOutput := filepath.Clean(outputFile)
 
-	inFile, err := os.Open(inputFile)
+	inFile, err := os.Open(cleanInput)
 	if err != nil {
-		return fmt.Errorf("error opening input file: %v", err)
+		return fmt.Errorf("error opening input file: %w", err)
 	}
 	defer inFile.Close()
 
@@ -281,7 +286,7 @@
 		return fmt.Errorf("error getting input file info: %v", err)
 	}
 
-	outFile, err := os.Create(outputFile)
+	outFile, err := os.Create(cleanOutput)
 	if err != nil {
 		return fmt.Errorf("error creating output file: %v", err)
 	}
@@ -334,5 +339,5 @@
 	if n < 0 {
 		return 0, fmt.Errorf("read returned negative bytes: %d", n)
 	}
-	return uint32(n), nil
+	return uint32(n), nil // #nosec G115 - n is always positive when err is nil
 }
```

Key changes:
1. Added filepath import for path sanitization
2. Changed KeyThreads type from uint8 to uint32 to prevent overflow
3. Added path cleaning for input/output files using filepath.Clean()
4. Added nosec comment with explanation for the uint32 conversion of buffer length
5. Improved error wrapping in file open operations
6. Maintained consistent error message formatting
